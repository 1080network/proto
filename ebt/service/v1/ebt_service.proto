// Copyright (c) 2022 Mica, Inc. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package ebt.service.v1;

import "common/authenticate/v1/authenticate.proto";
import "common/ping/v1/ping.proto";
import "ebt/funds/v1/funds.proto";
import "ebt/listitem/v1/list_item.proto";
import "ebt/program/v1/program.proto";
import "ebt/serviceaccount/v1/service_account.proto";
import "ebt/staticdata/v1/static_data.proto";
import "ebt/user/v1/user.proto";

option go_package = "mica/proto/ebt/servicev1";
option java_outer_classname = "EbtServiceProto";
option java_package = "io.mica.ebt.service.v1";
option objc_class_prefix = "MICA";

// The operations defined for this service are used internally by mica to set up EBT programs and
// also to filter Funds Items during transaction processing. The operations to maintain EBT list
// items are done through the regular EBT service (may need to reconsider this position later).</p>
// <p>This service can be used by EBT program managers to create service accounts for their
// administrators and systems, retrieve and update EBT program details and manage list items. The
// EBT Program and it's service account must be created completed by mica. A Program is for a given
// type (i.e. SNAP, TANF, WIC) and region (i.e. a US state) and has a set of rules associated with
// it.</p>
// <p>The program manager will be given access to the service account from which they can then
// update the programs rules and start maintain the product lists for the program. Each list item
// is associated with a program and has a product code (required), an optional description and a
// status indicating how the item should be processed. The status can be one of:</p>
// <ul><li>ELIGIBLE</li><li>INELIGIBLE</li><li>AGE_RESTRICTED</li></ul>
// <p>When processing an EBT payment token, mica will send the list of basket items to the EBT
// service in order to confirm that all the items in the basket are eligible. Any that aren't will
// be marked as such and the total requested amount from the Partner will be reduced. If the
// approval type is FULL then mica will decline the funds obtain request. If PARTIAL, mica will
// pass the request on to the Service Provider.</p>
// <p>Regardless of the rules defined for the Program, mica will record the items that wheren't on
// any list for the program. This will enable the EBT program manager to update the lists based on
// the recorded exceptions. mica will track the number of times a given product was seen.</p>
// <p>The program manager may specify whether they want to accept only items that are ELIGIBLE,
// reject only those that are AGE_RESTRICTED/INELIGIBLE or accept/reject those that aren't either
// of those.</p>
service EBTService {
  // Retrieve systems static data which is used to drive UI behavior.
  rpc GetStaticData(staticdata.v1.GetStaticDataRequest) returns (staticdata.v1.GetStaticDataResponse) {}

  // Most mica services require the caller to authenticate themselves. This operation allows the caller to do so.
  rpc Authenticate(common.authenticate.v1.AuthenticateRequest) returns (common.authenticate.v1.AuthenticateResponse) {}

  //<editor-fold desc="EBT Program Management">

  // Create an EBT Program to which access can be granted to a service account in order to create list items.
  rpc CreateEBTProgram(program.v1.CreateEBTProgramRequest) returns (program.v1.CreateEBTProgramResponse) {}

  // Retrieve an EBT Program based on it's key.
  rpc GetEBTProgram(program.v1.GetEBTProgramRequest) returns (program.v1.GetEBTProgramResponse) {}

  // Update an EBT program's rules.
  rpc UpdateEBTProgram(program.v1.UpdateEBTProgramRequest) returns (program.v1.UpdateEBTProgramResponse) {}

  // Like GetEBTProgram, can be used to retrieve EBT Programs based on the criteria in the request.
  rpc SearchEBTProgram(program.v1.SearchEBTProgramRequest) returns (program.v1.SearchEBTProgramResponse) {}
  //</editor-fold>


  //<editor-fold desc="Service Account Operations">

  // Create a service account that it used by a person or system to authenticate against mica.
  rpc CreateServiceAccount(serviceaccount.v1.CreateServiceAccountRequest) returns (serviceaccount.v1.CreateServiceAccountResponse) {}

  // Retrieve a service account based on it's key.
  rpc GetServiceAccount(serviceaccount.v1.GetServiceAccountRequest) returns (serviceaccount.v1.GetServiceAccountResponse) {}

  // Remove a service account based on it's key.
  rpc RemoveServiceAccount(serviceaccount.v1.RemoveServiceAccountRequest) returns (serviceaccount.v1.RemoveServiceAccountResponse) {}

  // Update the list of programs this account has access to.
  rpc UpdateServiceAccount(serviceaccount.v1.UpdateServiceAccountRequest) returns (serviceaccount.v1.UpdateServiceAccountResponse) {}

  // Like GetServiceAccount, can be used to retrieve Service Accounts based on the criteria in the request.
  rpc SearchServiceAccount(serviceaccount.v1.SearchServiceAccountRequest) returns (serviceaccount.v1.SearchServiceAccountResponse) {}

  //</editor-fold>

  //<editor-fold desc="User Account Operations">

  // Create a user account that it used by a person or system to authenticate against mica.
  rpc CreateUser(user.v1.CreateUserRequest) returns (user.v1.CreateUserResponse) {}

  // Retrieve a user account based on it's key.
  rpc GetUser(user.v1.GetUserRequest) returns (user.v1.GetUserResponse) {}

  // Remove a user account based on it's key.
  rpc RemoveUser(user.v1.RemoveUserRequest) returns (user.v1.RemoveUserResponse) {}

  rpc UpdateUser(user.v1.UpdateUserRequest) returns (user.v1.UpdateUserResponse) {}

  // Update the list of programs this account has access to.
  rpc SearchUser(user.v1.SearchUserRequest) returns (user.v1.SearchUserResponse) {}

  // FIXME: change password
  //</editor-fold>

  //<editor-fold desc="List Management Operations">

  // Create a list item (either eligible, ineligible or age restricted) for a given program and product code.
  rpc CreateListItem(listitem.v1.CreateListItemRequest) returns (listitem.v1.CreateListItemResponse) {}

  // Retrieve a list item based on it's key.
  rpc GetListItem(listitem.v1.GetListItemRequest) returns (listitem.v1.GetListItemResponse) {}

  // Remove a list item that is not longer needed based on it's key.
  rpc RemoveListItem(listitem.v1.RemoveListItemRequest) returns (listitem.v1.RemoveListItemResponse) {}

  // Update a list items description or status.
  rpc UpdateListItem(listitem.v1.UpdateListItemRequest) returns (listitem.v1.UpdateListItemResponse) {}

  // Like GetListItem, can be used to retrieve List Items based on the criteria in the request.
  rpc SearchListItem(listitem.v1.SearchListItemRequest) returns (listitem.v1.SearchListItemResponse) {}
  //</editor-fold>


  //<editor-fold desc="FundsObtain Item filter">

  // Filter a collection of Funds Line Items based on a given EBT type (e.g. SNAP, TANF, WIC) and region (e.g. a US state).
  rpc FundsLineItemFilter(funds.v1.FundsLineItemFilterRequest) returns (funds.v1.FundsLineItemFilterResponse) {}
  //</editor-fold>


  //<editor-fold desc="Admin Operations">

  // An operation to ping the server to ensure it's up and running and that the connection is good.
  rpc Ping(common.ping.v1.PingRequest) returns (common.ping.v1.PingResponse) {}
  //</editor-fold>
}