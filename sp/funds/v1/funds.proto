// Copyright (c) 2021 1080 Network, Inc. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of 1080 Network, Inc. and are [should this be is?] protected by
// copyright, trademark and other intellectual property laws (collective “1080 Software”). You may not use, copy,
// reproduce, download, store, post, broadcast, transmit, modify, sell or make available to the public content from the
// 1080 Software without the prior written approval of 1080 Network, Inc. 1080 Network, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of 1080 Network, Inc. and may not be used without
// permission.

syntax = "proto3";

package sp.funds.v1;

option go_package = "ten80/proto/sp/fundsv1";
option java_package = "network.ten80.sp.funds.v1";
option java_outer_classname = "FundsProto";
option objc_class_prefix = "TEN80";

import "common/v1/address.proto";
import "common/v1/amount.proto";
import "common/enums/approvaltype/v1/approval_type.proto";
import "common/enums/channel/v1/channel.proto";
import "common/enums/currency/v1/currency.proto";
import "common/enums/lineitemstatus/v1/line_item_status.proto";
import "common/enums/organizationcategory/v1/organization_category.proto";
import "common/v1/error.proto";
import "google/protobuf/timestamp.proto";

// Type that represents the details of the funds request (either to obtain or return).
message Funds {
    // 1080's transaction record primary key.
    string transaction_key = 1;

    // The 1080 generated key for this instrument.
    string sp_instrument_key = 2;

    // Service Provider's primary key for their instrument.
    string sp_instrument_ref = 3;

    // How this transaction should be processed.
    common.enums.channel.v1.Channel channel = 4;

    // The 3-letter currency code defined in ISO 4217. Note all amounts are in this currency.
    common.enums.currency.v1.Currency currency = 5;

    // The organization this operation is being processed for.
    string organization_key = 6;

    // The organization name this operation is being processed for.
    string organization_name = 7;

    // The organization address this operation is being processed for.
    common.v1.Address organization_address = 8;

    // The organizations category.
    common.enums.organizationcategory.v1.OrganizationCategory category = 9;

    // The store where this operation occurred.
    string store_key = 10;

    // The number of this store (an alternative unique value).
    string store_number = 11;

    // The street address of this store.
    common.v1.Address store_address = 12;

    // The clerk that processed this operation.
    string clerk_identifier = 13;

    // Total amount for this transaction.
    //
    // When Items are present then: `total_amount` = sum(`items.amount + items.tax_amount`)
    common.v1.Amount total_amount = 14;

    // The amount requested for this transaction. Note that this will be the same as total_amount if all products are eligible
    common.v1.Amount requested_amount = 15;

    string order_number = 16;

    // List of items bought or returned.
    repeated LineItemRequest line_items = 17;
}

message LineItemRequest {
    // unique number in a list of items that can be used to refer to a specific item
    int32 sequence = 1;

    string product_code = 2;

    string description = 3;

    // The total amount for this line item excluding tax.
    common.v1.Amount amount = 4;

    // The amount of tax for this line item.
    common.v1.Amount tax_amount = 5;

    common.enums.lineitemstatus.v1.LineItemStatus status = 6;
}

message ObtainFundsRequest {
    common.enums.approvaltype.v1.ApprovalType approval_type = 1;

    Funds funds = 2;
}

// union of ObtainFundsResponse.Status and ReturnFundsResponse.Status
enum FundsStatus {
    FUNDS_STATUS_UNSPECIFIED = 0;
    // An approval for the full amount
    FUNDS_STATUS_APPROVED = 1;
    // An error occurred when processing the request
    FUNDS_STATUS_ERROR = 2;
    // An approval was given for a partial amount
    FUNDS_STATUS_PARTIAL_APPROVAL = 3;
    // User instrument doesn't have sufficient funds to cover the transaction
    FUNDS_STATUS_INSUFFICIENT_FUNDS = 4;
    // When all products are either ineligible or age restricted
    FUNDS_STATUS_INELIGIBLE_PRODUCTS = 5;
    // Instrument/account not found
    FUNDS_STATUS_NOT_FOUND = 6;
    // User instrument is closed
    FUNDS_STATUS_INSTRUMENT_CLOSED = 7;
    // Request triggered a risk or fraud check resulting in a decline
    FUNDS_STATUS_RISK_FRAUD = 8;
    // The user needs to call the SP to resolve an issue
    FUNDS_STATUS_USER_CALL_SP = 9;
    // The operation isn't supported by the SP
    FUNDS_STATUS_UNSUPPORTED = 10;
    // The SP is temporarily unavailable
    FUNDS_STATUS_SP_UNAVAILABLE = 11;
    // The payment token sent is invalid or not found
    FUNDS_STATUS_INVALID_PAYMENT_TOKEN = 12;
}

message ObtainFundsResponse {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        // An approval for the full amount
        STATUS_APPROVED = 1;
        // An error occurred when processing the request
        STATUS_ERROR = 2;
        // An approval was given for a partial amount
        STATUS_PARTIAL_APPROVAL = 3;
        // User instrument doesn't have sufficient funds to cover the transaction
        STATUS_INSUFFICIENT_FUNDS = 4;
        // When all products are either ineligible or age restricted
        STATUS_INELIGIBLE_PRODUCTS = 5;
        // Instrument/account not found
        STATUS_NOT_FOUND = 6;
        // User instrument is closed
        STATUS_INSTRUMENT_CLOSED = 7;
        // Request triggered a risk or fraud check resulting in a decline
        STATUS_RISK_FRAUD = 8;
        // The user needs to call the SP to resolve an issue
        STATUS_USER_CALL_SP = 9;
        // The operation isn't supported by the SP
        STATUS_UNSUPPORTED = 10;
        // The SP is temporarily unavailable
        STATUS_SP_UNAVAILABLE = 11;
        // The payment token sent is invalid or not found
        STATUS_INVALID_PAYMENT_TOKEN = 12;
    }
    Status status = 1;

    common.v1.Error error = 2;

    string transaction_ref = 3;

    common.v1.Amount approved_amount = 4;
}

message ReturnFundsRequest {
    Funds funds = 1;
}

message ReturnFundsResponse {
    enum Status {
        reserved 3, 4;
        STATUS_UNSPECIFIED = 0;
        // An approval for the full amount
        STATUS_APPROVED = 1;
        // An error occurred when processing the request
        STATUS_ERROR = 2;
        // Instrument/account not found
        STATUS_NOT_FOUND = 6;
        // User instrument is closed
        STATUS_INSTRUMENT_CLOSED = 7;
        // Request triggered a risk or fraud check resulting in a decline
        STATUS_RISK_FRAUD = 8;
        // The user needs to call the SP to resolve an issue
        STATUS_USER_CALL_SP = 9;
        // The operation isn't supported by the SP
        STATUS_UNSUPPORTED = 10;
        // The SP is temporarily unavailable
        STATUS_SP_UNAVAILABLE = 11;
        // The payment token sent is invalid or not found
        STATUS_INVALID_PAYMENT_TOKEN = 12;
    }
    Status status = 1;

    common.v1.Error error = 2;

    string transaction_ref = 3;

    common.v1.Amount approved_amount = 4;
}

message SearchFundsRequest {
    oneof criteria {
        // 1080's transaction record primary key.
        string transaction_key = 1;

        // The payment token of the user.
        string sp_payment_token = 2;

        // Service Provider's primary key for their instrument.
        string sp_instrument_ref = 3;
    }

    // Transactions that occurred after this date (inclusive).
    google.protobuf.Timestamp date_from = 4;

    // Transactions that occurred before this date (exclusive).
    google.protobuf.Timestamp date_to = 5;
}

message SearchFundsResponse {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_SUCCESS = 1;
        STATUS_ERROR = 2;
    }
    Status status = 1;

    common.v1.Error error = 2;

    repeated Funds funds = 3;
}
