// Copyright (c) 2021 1080 Network, Inc. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of 1080 Network, Inc. and are protected by copyright, trademark
// and other intellectual property laws (collective “1080 Software”). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the 1080 Software without the
// prior written approval of 1080 Network, Inc. 1080 Network, its logos, slogans, taglines, products, feature names, and
// other trademarks are trademarks of 1080 Network, Inc. and may not be used without permission.

syntax = "proto3";

package sp.user.v1;

option go_package = "ten80/proto/sp/userv1";
option java_package = "network.ten80.sp.user.v1";
option java_outer_classname = "UserProto";
option objc_class_prefix = "TEN80";

import "common/v1/error.proto";
import "common/v1/user.proto";
import "google/protobuf/timestamp.proto";

message User {
    // version of the user record, used for optimistic locking
    int64 version = 1;

    // Date that the Store was created at 1080.
    google.protobuf.Timestamp created = 2;

    // Date that the Store was last updated at 1080.
    google.protobuf.Timestamp updated = 3;

    // The key representing this user in 1080.
    string sp_user_key = 4;

    // Primary key on the external system.
    string sp_user_ref = 5;

    common.v1.UserDemographic user_demographic = 6;
}

// to 1080

message RegisterUserRequest {
    // Primary key on the external system.
    string sp_user_ref = 8;

    common.v1.UserDemographic user_demographic = 1;
}

message RegisterUserResponse {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_SUCCESS = 1;
        STATUS_ERROR = 2;
        STATUS_DUPLICATE = 3;
    }
    Status status = 1;

    common.v1.Error error = 2;

    // The key representing this user in 1080.
    string sp_user_key = 3;

    int64 version = 4;
}

message UpdateUserRequest {
    // The key representing this user in 1080.
    string sp_user_key = 1;

    int64 version = 2;

    common.v1.UserDemographic user_demographic = 3;
}

message UpdateUserResponse {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_SUCCESS = 1;
        STATUS_ERROR = 2;
        STATUS_NOT_FOUND = 3;
        STATUS_VERSION_MISMATCH = 4;
    }
    Status status = 1;

    common.v1.Error error = 2;

    int64 version = 3;
}

message RemoveUserRequest {
    // The key representing this user in 1080.
    string sp_user_key = 1;
}

message RemoveUserResponse {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_SUCCESS = 1;
        STATUS_ERROR = 2;
        STATUS_NOT_FOUND = 3;
    }
    Status status = 1;

    common.v1.Error error = 2;
}

message GetUserRequest {
    oneof criteria {
        // The key representing this user in 1080.
        string sp_user_key = 1;

        // Primary key on the external system.
        string sp_user_ref = 2;
    }
}

message GetUserResponse {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_SUCCESS = 1;
        STATUS_ERROR = 2;
        STATUS_NOT_FOUND = 3;
    }
    Status status = 1;

    common.v1.Error error = 2;

    User user = 3;
}

message SearchUserRequest {
    // The key representing this user in 1080.
    string sp_user_key = 1;

    string first_name = 2;

    string last_name = 3;

    string username = 4;
}

message SearchUserResponse {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_SUCCESS = 1;
        STATUS_ERROR = 2;
    }
    Status status = 1;

    common.v1.Error error = 2;

    repeated User users = 3;
}

// from 1080

message EnrollUserInstrumentRequest {
    // The key representing this user in 1080.
    string sp_user_key = 1;

    // Primary key on the external system.
    string sp_user_ref = 2;

    // The key representing this instrument in 1080.
    string sp_instrument_key = 3;

    // Primary key on the external system.
    string sp_instrument_ref = 4;

    // The 8 character code that needs to be sent to the user
    string matching_code = 6;
}

message EnrollUserInstrumentResponse {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_SUCCESS = 1;
        STATUS_ERROR = 2;
        STATUS_NOT_FOUND = 3;
        STATUS_USER_CLOSED = 4;
        // temporary state in which the user can try again later
        STATUS_RISK_FRAUD = 5;
    }
    Status status = 1;

    common.v1.Error error = 2;
}
