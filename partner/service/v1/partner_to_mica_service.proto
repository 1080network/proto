// Copyright (c) 2022 Mica, Inc. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package partner.service.v1;

import "common/authenticate/v1/authenticate.proto";
import "common/ping/v1/ping.proto";
import "partner/value/v1/value.proto";
import "partner/instrument/v1/instrument.proto";
import "partner/organization/v1/organization.proto";
import "partner/partner/v1/partner.proto";
import "partner/paymenttoken/v1/payment_token.proto";
import "partner/serviceaccount/v1/service_account.proto";
import "partner/serviceprovider/v1/service_provider.proto";
import "partner/store/v1/store.proto";
import "partner/transaction/v1/transaction.proto";
import "partner/widget/v1/widget.proto";

option go_package = "mica/proto/partner/servicev1";
option java_outer_classname = "PartnerToMicaServiceProto";
option java_package = "io.mica.partner.service.v1";
option objc_class_prefix = "MICA";

service PartnerToMicaService {
  // Most mica services require the caller to authenticate themselves. This operation allows the caller to do so.
  rpc Authenticate(common.authenticate.v1.AuthenticateRequest) returns (common.authenticate.v1.AuthenticateResponse) {}

  //<editor-fold desc="Partner Operations">

  // Retrieves the details of the Partner at mica.
  rpc GetPartner(partner.v1.GetPartnerRequest) returns (partner.v1.GetPartnerResponse) {}
  //</editor-fold>


  //<editor-fold desc="Service Account Operations">

  // Create a service account that it used by a person or system to authenticate against mica.
  rpc CreateServiceAccount(serviceaccount.v1.CreateServiceAccountRequest) returns (serviceaccount.v1.CreateServiceAccountResponse) {}

  // Retrieve a service account based on its key.
  rpc GetServiceAccount(serviceaccount.v1.GetServiceAccountRequest) returns (serviceaccount.v1.GetServiceAccountResponse) {}

  // Update a service account based on its key.
  rpc UpdateServiceAccount(serviceaccount.v1.UpdateServiceAccountRequest) returns (serviceaccount.v1.UpdateServiceAccountResponse) {}

  // Like GetServiceAccount, can be used to retrieve Service Accounts based on the criteria in the request.
  rpc SearchServiceAccount(serviceaccount.v1.SearchServiceAccountRequest) returns (serviceaccount.v1.SearchServiceAccountResponse) {}
  //</editor-fold>


  //<editor-fold desc="Organization Operations">

  // Retrieve an organization based on it's key.
  rpc GetOrganization(organization.v1.GetOrganizationRequest) returns (organization.v1.GetOrganizationResponse) {}

  // Update a given organization.
  rpc UpdateOrganization(organization.v1.UpdateOrganizationRequest) returns (organization.v1.UpdateOrganizationResponse) {}

  // Like GetOrganization, can be used to retrieve Organizations based on the criteria in the request.
  rpc SearchOrganization(organization.v1.SearchOrganizationRequest) returns (organization.v1.SearchOrganizationResponse) {}
  //</editor-fold>


  //<editor-fold desc="Store Operations">

  // Create a store that sits under an Organization.
  rpc CreateStore(store.v1.CreateStoreRequest) returns (store.v1.CreateStoreResponse) {}

  // Retrieve a store based on it's key.
  rpc GetStore(store.v1.GetStoreRequest) returns (store.v1.GetStoreResponse) {}

  // Update the store number and address of a Store.
  rpc UpdateStore(store.v1.UpdateStoreRequest) returns (store.v1.UpdateStoreResponse) {}

  // Remove an existing Store.
  rpc RemoveStore(store.v1.RemoveStoreRequest) returns (store.v1.RemoveStoreResponse) {}

  // Like GetStore, can be used to retrieve Stores based on the criteria in the request.
  rpc SearchStore(store.v1.SearchStoreRequest) returns (store.v1.SearchStoreResponse) {}
  //</editor-fold>


  //<editor-fold desc="Service Provider Operations">

  // Used to retrieve SPs based on the criteria in the request.
  rpc SearchServiceProvider(serviceprovider.v1.SearchServiceProviderRequest) returns (serviceprovider.v1.SearchServiceProviderResponse) {}
  //</editor-fold>


  //<editor-fold desc="Payment Token Operations">

  // When a user no longer wishes to use their payment tokens this operation can remove them from mica.
  rpc ClosePaymentToken(paymenttoken.v1.RemovePaymentTokenRequest) returns (paymenttoken.v1.RemovePaymentTokenResponse) {}

  // A Partner can proactively replace a payment token with a new one for future use.
  rpc ReplacePaymentToken(paymenttoken.v1.ExchangePaymentTokenRequest) returns (paymenttoken.v1.ExchangePaymentTokenResponse) {}

  // Search for Payment Tokens that the Partner has created.
  rpc SearchPaymentToken(paymenttoken.v1.SearchPaymentTokenRequest) returns (paymenttoken.v1.SearchPaymentTokenResponse) {}
  //</editor-fold>


  //<editor-fold desc="Value Operations">

  // An operation to obtain value from a user in order to pay for goods or services rendered to the user.
  rpc ObtainValue(value.v1.ObtainValueRequest) returns (value.v1.ObtainValueResponse) {}

  // An operation to return value to a user in order to refund them for goods or services.
  rpc ReturnValue(value.v1.ReturnValueRequest) returns (value.v1.ReturnValueResponse) {}

  // An operation to search for Value operations either Obtain or Return that the Partner has requested of mica.
  rpc SearchValue(value.v1.SearchValueRequest) returns (value.v1.SearchValueResponse) {}
  //</editor-fold>


  //<editor-fold desc="Admin Operations">

  // An operation to ping the server to ensure it's up and running and that the connection is good.
  rpc Ping(common.ping.v1.PingRequest) returns (common.ping.v1.PingResponse) {}
  //</editor-fold>


  //<editor-fold desc="Widget Operations">

  rpc InitializeWidget(widget.v1.InitializeWidgetRequest) returns (widget.v1.InitializeWidgetResponse) {}

  rpc ExchangeSessionKey(instrument.v1.ExchangeSessionKeyRequest) returns (instrument.v1.ExchangeSessionKeyResponse) {}
  //</editor-fold>


  //<editor-fold desc="Dashboard Operations">

  rpc SearchTransactionData(transaction.v1.SearchTransactionDataRequest) returns (transaction.v1.SearchTransactionDataResponse) {}

  rpc SearchTransactionGeographyData(transaction.v1.SearchTransactionGeographyDataRequest) returns (transaction.v1.SearchTransactionGeographyDataResponse) {}

  rpc SearchTransactionServiceProviderData(transaction.v1.SearchTransactionServiceProviderDataRequest) returns (transaction.v1.SearchTransactionServiceProviderDataResponse) {}
  //</editor-fold>
}
