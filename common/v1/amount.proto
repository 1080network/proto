// Copyright (c) 2021 1080 Network, Inc. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of 1080 Network, Inc. and are [should this be is?] protected by
// copyright, trademark and other intellectual property laws (collective “1080 Software”). You may not use, copy,
// reproduce, download, store, post, broadcast, transmit, modify, sell or make available to the public content from the
// 1080 Software without the prior written approval of 1080 Network, Inc. 1080 Network, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of 1080 Network, Inc. and may not be used without
// permission.

syntax = "proto3";

package common.v1;

option go_package = "ten80/proto/common/v1;commonv1";
option java_package = "network.ten80.common.v1";
option java_outer_classname = "AmountProto";
option objc_class_prefix = "TEN80";

import "common/enums/currency/v1/currency.proto";

message FullAmount {
    // The 3-letter currency code defined in ISO 4217.
    common.enums.currency.v1.Currency currency = 1;

    // The whole units of the amount.
    // For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
    int64 units = 2;

    // Number of nano (10^-9) units of the amount.
    // The value must be between -999,999,999 and +999,999,999 inclusive.
    // If `units` is positive, `nanos` must be positive or zero.
    // If `units` is zero, `nanos` can be positive, zero, or negative.
    // If `units` is negative, `nanos` must be negative or zero.
    // For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
    int32 nanos = 3;
}

message Amount {
    // The whole units of the amount.
    // For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
    int64 units = 2;

    // Number of nano (10^-9) units of the amount.
    // The value must be between -999,999,999 and +999,999,999 inclusive.
    // If `units` is positive, `nanos` must be positive or zero.
    // If `units` is zero, `nanos` can be positive, zero, or negative.
    // If `units` is negative, `nanos` must be negative or zero.
    // For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
    int32 nanos = 3;
}
