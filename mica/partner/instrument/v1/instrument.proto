// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package mica.partner.instrument.v1;

import "micashared/common/v1/error.proto";
import "micashared/common/v1/instrument.proto";
import "validate/validate.proto";

option go_package = "mica/partner/instrumentv1";
option java_outer_classname = "InstrumentProto";
option java_package = "io.mica.partner.instrument.v1";
option objc_class_prefix = "MICA";

message ExchangeSessionKeyRequest {
  // The session key that was established when the Widget was initialized
  string session_key = 1 [(validate.rules).string = {
    min_len: 27,
    max_len: 50
  }];

  // Primary key on the external system.
  string partner_user_ref = 3 [(validate.rules).string = {max_len: 100}];

  // Primary key on the external system.
  string partner_instrument_ref = 2 [(validate.rules).string = {max_len: 100}];

  // Primary key on the external system.
  string partner_uuek_ref = 4 [(validate.rules).string = {max_len: 100}];
}

message ExchangeSessionKeyResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_MATCHING_CODE_MISMATCH = 3;
    STATUS_NOT_FOUND = 4;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // The UUEK that the Partner can use to obtain or return value for this user.
  string partner_uuek = 3 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];
}

message ProvisionUUEKWithLinkSessionKeyRequest {
  // Use the session key to provision a UUEK
  string link_session_key = 1 [(validate.rules).string = {
    min_len: 27,
    max_len: 50
  }];
}

message ProvisionUUEKWithLinkSessionKeyResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // The UUEK that can be used to run a transaction
  string partner_uuek = 3;
}

message LinkInstrumentWithCodeRequest{
  // String code supplied by the end user
  string linking_code = 1;

  // If set to true a uuek will be minted and no link session will be created
  bool is_one_time_use = 2;

  // If a multi use session is requested (i.e. is_one_time_use is false), setting this flag to true will return both a
  // link session and a uuek
  bool create_uuek = 3;

  // On behalf of which organization this link will be created.
  oneof organization_identifier {
    string organization_key = 4 [(validate.rules).string = {max_len: 50}];

    // The primary key for this organization at the Partner.
    string organization_ref = 5 [(validate.rules).string = {max_len: 100}];
  }  
}

message LinkInstrumentWithCodeResponse{
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // If the requested link is one time use there will be no link session key
  bool is_one_time_use = 3;

  // If it is not a one time use the session key is the token to request other uueks in the future
  string link_session_key = 4;

  // If a uuek was requested or if one time use was requested a uuek is minted
  string uuek = 5;

  // Any claims that are associated with the link as provided by the Service Provider
  micashared.common.v1.InstrumentLinkClaims claims = 6;
}
