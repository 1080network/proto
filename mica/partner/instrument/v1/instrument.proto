// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package mica.partner.instrument.v1;

import "micashared/common/v1/error.proto";
import "micashared/common/v1/instrument.proto";
import "validate/validate.proto";

option go_package = "mica/partner/instrumentv1";
option java_outer_classname = "InstrumentProto";
option java_package = "io.mica.partner.instrument.v1";
option objc_class_prefix = "MICA";

message ProvisionUUEKFromLinkRequest {
  // Use the session key to provision a UUEK
  string link_key = 1 [(validate.rules).string = {
    min_len: 27,
    max_len: 50
  }];

  // The action the partner intends to take with this UUEK.
  // Provisioned UUEKs are restricted to the requested intent.
  oneof intent {
    // Provision UUEK to obtain value from this linked instrument
    ObtainValueIntent obtain_value = 2;

    // Provision a UUEK to return value to this linked instrument
    ReturnValueIntent return_value = 3;

    // Provision a UUEK to hold value against this linked instrument
    HoldValueIntent hold_value = 4;

    // Provision a UUEK to authorize the creation of a recurring payment
    CreateRecurringPaymentIntent create_recurring_payment = 5;
  }

  message ObtainValueIntent {}
  message ReturnValueIntent {}
  message HoldValueIntent {}
  message CreateRecurringPaymentIntent {}
}

message ProvisionUUEKFromLinkResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
    STATUS_INVALID_LINK = 4;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // The UUEK that can be used for the requested intent
  string uuek = 3;
}

message CompleteLinkingWithCodeRequest{
  // String code supplied by the end user
  string linking_code = 1;

  // On behalf of which organization this link will be created.
  oneof organization_identifier {
    string organization_key = 2 [(validate.rules).string = {max_len: 50}];
    // The primary key for this organization at the Partner.
    string organization_ref = 3 [(validate.rules).string = {max_len: 100}];
  }

  // If a multi use session is requested (i.e. is_one_time_use is false), setting this flag to true will return both a
  // link session and a uuek
  bool create_uuek = 4;
}

message CompleteLinkingWithCodeResponse{
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    //the link source is in a different network and therefore not compatible
    STATUS_INVALID_NETWORK = 2;
    //the organization passed does not exist or is deactivated
    STATUS_INVALID_ORGANIZATION = 3;
    //the source account or instrument for this link is not supported
    STATUS_UNSUPPORTED_LINK_SOURCE = 4;
    //the provided code is incorrect
    STATUS_INVALID_CODE = 5;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // If the requested link is one time use there will be no link session key
  bool is_one_time_use = 3;

  // If it is not a one time use the session key is the token to request other UUEKs in the future
  string link_key = 4;

  // If a uuek was requested or if one time use was requested a uuek is minted
  string uuek = 5;

  micashared.common.v1.LinkedInstrumentData instrument_data = 7;

  // Any claims that are associated with the link as provided by the Service Provider
  micashared.common.v1.InstrumentLinkClaims claims = 6;
}

message GetLinkRequest {
  string link_key = 1;
}

message GetLinkResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    //the link source is in a different network and therefore not compatible
    STATUS_LINK_NOT_FOUND = 2;
  }
  Status status = 1;
  micashared.common.v1.Error error = 2;
  Link link = 3;
}

message RemoveInstrumentLinkRequest {
  string link_key = 1;
}

message RemoveInstrumentLinkResponse {
  // Unless an error is encountered, Mica will respond with one of these results.
  oneof result {
    Success success = 1;
    Failure failure = 2;
  }

  message Success {}

  message Failure {
    // Structured failure code for cause of failure
    FailureCode code = 1;
    string message = 2;
  }

  enum FailureCode {
    FAILURE_CODE_UNSPECIFIED = 0;

    // The requested link was not found in the partner system
    FAILURE_CODE_LINK_NOT_FOUND = 1;

    // The requested link was used by 1 or more payments that blocked deletion
    FAILURE_CODE_LINK_IN_USE = 2;
  }
}

message Link {
  string key = 1;
  micashared.common.v1.LinkedInstrumentData instrument_data = 2;
}
