// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package mica.partner.service.v1;

import "google/protobuf/timestamp.proto";
import "mica/partner/value/v1/value.proto";
import "micashared/common/enums/approvaltype/v1/approval_type.proto";
import "micashared/common/enums/currency/v1/currency.proto";
import "micashared/common/v1/user.proto";
import "micashared/common/enums/recurringpaymentfrequency/v1/recurringpaymentfrequency.proto";
import "micashared/common/enums/recurringpaymenttype/v1/recurringpaymenttype.proto";
import "micashared/common/v1/error.proto";
import "micashared/common/v1/line_item.proto";
import "micashared/common/v1/risk_signals.proto";
import "micashared/common/v1/transaction.proto";
import "micashared/common/v1/uuek.proto";
import "validate/validate.proto";

option go_package = "mica/partner/servicev1";
option java_outer_classname = "PartnerToMicaWIPServiceProto";
option java_package = "io.mica.partner.service.v1";
option objc_class_prefix = "MICA";

service PartnerToMicaWIPService {
  // Create a recurring payment to be attached to a partner to service provider link
  rpc CreateRecurringPayment(CreateRecurringPaymentRequest) returns (CreateRecurringPaymentResponse) {}

  // Activate a recurring payment so that it can be used to make payments
  rpc ActivateRecurringPayment(ActivateRecurringPaymentRequest) returns (ActivateRecurringPaymentResponse) {}

  // The merchant or the user using the merchants software may wish to cancel a recurring payment
  rpc CancelRecurringPayment(CancelRecurringPaymentRequest) returns (CancelRecurringPaymentResponse) {}

  // return a recurring payment using a unique identifier as a key
  rpc GetRecurringPayment(GetRecurringPaymentRequest) returns (GetRecurringPaymentResponse) {}

  // Search for recurring payments by a link key
  rpc SearchRecurringPayment(SearchRecurringPaymentRequest) returns (SearchRecurringPaymentResponse) {}

  //  The user should call this method before calling ExecuteRecurringPaymentObtainValue below
  rpc ProvisionRecurringPaymentUUEK(ProvisionRecurringPaymentUUEKRequest) returns (ProvisionRecurringPaymentUUEKResponse) {}

  // Note that an attempt to pass a UUEK not minted by the ProvisionRecurringPaymentUUEK method will result in a runtime error
  rpc RecurringPaymentObtainValue(RecurringPaymentObtainValueRequest) returns (RecurringPaymentObtainValueResponse) {}

  // This method is used to return value to the user's instrument for a recurring payment
  rpc RecurringPaymentReturnValue(RecurringPaymentReturnValueRequest) returns (RecurringPaymentReturnValueResponse) {}

  // Initialize the widget (deprecated)
  rpc InitializeWidget(InitializeWidgetRequest) returns (InitializeWidgetResponse) {option deprecated = true;}

  // Exchange the session key for a UUEK (deprecated)
  rpc ExchangeSessionKey(ExchangeSessionKeyRequest) returns (ExchangeSessionKeyResponse) {option deprecated = true;}
}

message RecurringPayment {
  string recurring_payment_key = 1;

  string nickname = 2;

  micashared.common.enums.currency.v1.Currency currency = 3;

  string amount = 4;

  micashared.common.enums.recurringpaymentfrequency.v1.RecurringPaymentFrequency frequency = 5;

  micashared.common.enums.recurringpaymenttype.v1.RecurringPaymentType recurring_payment_type = 6;

  google.protobuf.Timestamp created = 7;

  int64 total_number_payments = 8;

  google.protobuf.Timestamp last_payment = 9;

  string last_payment_amount = 10;

  int64 number_payments_made = 11;

  RecurringPaymentStatus status = 12;
}

enum RecurringPaymentStatus {
  RECURRING_PAYMENT_STATUS_UNSPECIFIED = 0;

  RECURRING_PAYMENT_STATUS_ACTIVE = 1;

  RECURRING_PAYMENT_STATUS_INACTIVE = 2;

  RECURRING_PAYMENT_STATUS_CANCELED = 3;
}

// the recurring payment must have an associated link object which refers to a
// service provider link, which in turn refers to an instrument and user
message CreateRecurringPaymentRequest {

  oneof organization_identifier {
    string organization_key = 1 [(validate.rules).string = {max_len: 50}];

    // The primary key for this organization at the Partner.
    string organization_ref = 2 [(validate.rules).string = {max_len: 100}];
  }

  string linking_code = 4;

  string nickname = 3;

  micashared.common.enums.currency.v1.Currency currency = 5;

  string amount = 6;

  int64 number_payments = 7;

  micashared.common.enums.recurringpaymentfrequency.v1.RecurringPaymentFrequency frequency = 8;

  micashared.common.enums.recurringpaymenttype.v1.RecurringPaymentType recurring_payment_type = 9;
}

message CreateRecurringPaymentResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_INVALID_LINK = 2;
    STATUS_INVALID_ORGANIZATION = 3;
    STATUS_INVALID_NETWORK = 4;
    STATUS_INVALID_RECURRING_PAYMENT_PARAMETER = 5;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  RecurringPayment recurring_payment = 3;
}

message CancelRecurringPaymentRequest {
  string recurring_payment_key = 1;
}

message CancelRecurringPaymentResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }

  Status status = 1;

  micashared.common.v1.Error error = 2;
}

message ActivateRecurringPaymentRequest {
  string recurring_payment_key = 1;
}

message ActivateRecurringPaymentResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }

  Status status = 1;

  micashared.common.v1.Error error = 2;
}

// right now we can only search by the
// link id but perhaps later we can use
// a different search parameter
message SearchRecurringPaymentRequest {
  string link_key = 1;
}

message SearchRecurringPaymentResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }

  Status status = 1;

  micashared.common.v1.Error error = 2;

  repeated RecurringPayment recurring_payments = 3;
}

message GetRecurringPaymentRequest {

  string recurring_payment_key = 1;

}

message GetRecurringPaymentResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_NOT_FOUND = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  RecurringPayment recurring_payment = 3;

}

message ProvisionRecurringPaymentUUEKRequest {
  string recurring_payment_key = 1;
}

message ProvisionRecurringPaymentUUEKResponse {

  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_NOT_FOUND = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  string partner_uuek = 3;

}

message RecurringPaymentObtainValueRequest {

  string recurring_payment_key = 1;

  micashared.common.enums.approvaltype.v1.ApprovalType approval_type = 2;

  value.v1.ValueRequest value = 3;

  micashared.common.v1.RiskSignal risk_signal = 4;

}

message RecurringPaymentObtainValueResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    // An approval for the full amount
    STATUS_FULL_APPROVAL = 1;
    // An error occurred when processing the request
    STATUS_ERROR = 2;
    // An approval was given for a partial amount
    STATUS_PARTIAL_APPROVAL = 3;
    // User instrument doesn't have sufficient value to cover the transaction
    STATUS_INSUFFICIENT_VALUE = 4;
    // When all products are either ineligible or age restricted
    STATUS_INELIGIBLE_PRODUCTS = 5;
    // Instrument/account not found
    STATUS_NOT_FOUND = 6;
    // User instrument is closed
    STATUS_INSTRUMENT_CLOSED = 7;
    // Request triggered a transactional risk or fraud check resulting in a decline
    STATUS_TRANSACTION_RISK_FRAUD = 8;
    // Request triggered a bad actor risk or fraud check resulting in a decline
    STATUS_BAD_ACTOR_RISK_FRAUD = 16;
    // Request triggered a user-based risk or fraud check resulting in a decline
    STATUS_USER_RISK_FRAUD = 17;
    // Request triggered a instrument-based risk or fraud check resulting in a decline
    STATUS_INSTRUMENT_RISK_FRAUD = 18;
    // The user needs to call the Service Provider to resolve an issue
    STATUS_USER_CALL_SERVICE_PROVIDER = 9;
    // The operation isn't supported by the Service Provider
    STATUS_UNSUPPORTED = 10;
    // The Fi is unavailable at this time
    STATUS_SERVICE_PROVIDER_UNAVAILABLE = 11;
    // The UUEK sent is invalid or not found
    STATUS_INVALID_UUEK = 12;
    // A valid PIN is required for this transaction
    STATUS_PIN_REQUIRED = 13;
    // returned when processing an EBT transaction but no line items have been given
    STATUS_MISSING_LINE_ITEMS = 14;
    // when partial approval is requested but not supported
    STATUS_PARTIAL_APPROVAL_INVALID = 15;
    // Request resulted in one or more limits being exceeded at the Service Provider
    STATUS_LIMIT_EXCEEDED = 19;
    // The referenced Organization of this request isn't fully configured to process transactions
    STATUS_ORGANIZATION_NOT_CONFIGURED = 21;
    // The total amount of the line items does not match the total amount of the transaction
    STATUS_LINE_ITEM_TOTAL_MISMATCH = 22;
    // The call to the Service Provider (a.k.a. the issuer) timed out
    STATUS_SERVICE_PROVIDER_TIMEOUT = 23;
  }

  Status status = 1;

  micashared.common.v1.Error error = 2;

  // Primary key of created transaction assigned by Mica.
  string transaction_key = 3 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  // Correlation ID of the request assigned by Mica.
  string cid = 4;

  // Amount expressed as: ([0-9]*[.])?[0-9]+
  string approved_amount = 5;

  // status of each line item based on processing by Mica. The list will be in the same order as the request and will
  // will typically have a status of LINE_ITEM_STATUS_ELIGIBLE.
  repeated micashared.common.v1.LineItemSequenceAndStatus line_item_sequence_and_statuses = 6;

  // This message holds immutable details about the instruments that back UUEKs. These attributes can be used to have
  // stable references or knowledge of the underlying instrument that was used to transact.
  micashared.common.v1.ImmutableInstrumentDetails immutable_instrument_details = 8;

  micashared.common.v1.TransactionIdentifier transaction_identifier = 9;

}

message RecurringPaymentReturnValueRequest {

  string recurring_payment_key = 1;

  value.v1.ValueRequest value = 2;

  micashared.common.v1.RiskSignal risk_signal = 3;

}

message RecurringPaymentReturnValueResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    // An approval for the full amount
    STATUS_FULL_APPROVAL = 1;
    // An error occurred when processing the request
    STATUS_ERROR = 2;
    // User instrument is closed
    STATUS_INSTRUMENT_CLOSED = 3;
    // Instrument/account not found
    STATUS_NOT_FOUND = 4;
    // Request triggered a transactional risk or fraud check resulting in a decline
    STATUS_TRANSACTION_RISK_FRAUD = 5;
    // Request triggered a bad actor risk or fraud check resulting in a decline
    STATUS_BAD_ACTOR_RISK_FRAUD = 16;
    // Request triggered a user-based risk or fraud check resulting in a decline
    STATUS_USER_RISK_FRAUD = 17;
    // Request triggered a instrument-based risk or fraud check resulting in a decline
    STATUS_INSTRUMENT_RISK_FRAUD = 18;
    // The user needs to call the Service Provider to resolve an issue
    STATUS_USER_CALL_SERVICE_PROVIDER = 6;
    // The operation isn't supported by the Service Provider
    STATUS_UNSUPPORTED = 7;
    // The Fi is unavailable at this time
    STATUS_SERVICE_PROVIDER_UNAVAILABLE = 8;
    // The UUEK sent is invalid or not found
    STATUS_INVALID_UUEK = 9;
    // Request resulted in one or more limits being exceeded at the Service Provider
    STATUS_LIMIT_EXCEEDED = 19;
    // The referenced Organization of this request isn't fully configured to process transactions
    STATUS_ORGANIZATION_NOT_CONFIGURED = 20;
    // The total amount of the line items does not match the total amount of the transaction
    STATUS_LINE_ITEM_TOTAL_MISMATCH = 21;
    // The call to the Service Provider (a.k.a. the issuer) timed out
    STATUS_SERVICE_PROVIDER_TIMEOUT = 22;
  }

  Status status = 1;

  micashared.common.v1.Error error = 2;
}

message InitializeWidgetRequest {
  // Details of the user.
  micashared.common.v1.UserDemographic user_demographic = 3;
}

message InitializeWidgetResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;

    STATUS_SUCCESS = 1;
    // generic error that's not one of the following
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  string session_key = 3 [(validate.rules).string = {
    min_len: 27,
    max_len: 50
  }];
}

message ExchangeSessionKeyRequest {
  reserved 2, 3, 4;
  // The session key that was established when the Widget was initialized
  string session_key = 1 [(validate.rules).string = {
    min_len: 27,
    max_len: 50
  }];

  // The organization this operation is being processed for.
  oneof organization_identifier {
    string organization_key = 5 [(validate.rules).string = {max_len: 50}];

    // The primary key for this organization at the Partner.
    string organization_ref = 6 [(validate.rules).string = {max_len: 100}];
  }
}

message ExchangeSessionKeyResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_MATCHING_CODE_MISMATCH = 3;
    STATUS_NOT_FOUND = 4;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // The UUEK that the Partner can use to obtain or return value for this user.
  string partner_uuek = 3 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];
}
