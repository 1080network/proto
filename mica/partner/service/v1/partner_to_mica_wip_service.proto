// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package mica.partner.service.v1;

import "google/protobuf/timestamp.proto";
import "micashared/common/enums/currency/v1/currency.proto";
import "micashared/common/v1/user.proto";
import "micashared/common/v1/error.proto";
import "validate/validate.proto";

option go_package = "mica/partner/servicev1";
option java_outer_classname = "PartnerToMicaServiceProto";
option java_package = "io.mica.partner.service.v1";
option objc_class_prefix = "MICA";

service PartnerToMicaWIPService {
  // Create a recurring payment to be attached to a partner to service provider link
  rpc CreateRecurringPayment(CreateRecurringPaymentRequest) returns (CreateRecurringPaymentResponse) {}

  // return a recurring payment using a unique identifier as a key
  rpc GetRecurringPayment(GetRecurringPaymentRequest) returns (GetRecurringPaymentResponse) {}

  //  The user should call this method before calling ExecuteRecurringPaymentObtainValue below
  rpc ProvisionRecurringPaymentUUEK(ProvisionRecurringPaymentUUEKRequest) returns (ProvisionRecurringPaymentUUEKResponse) {}
  
  // Initialize the widget (deprecated)
  rpc InitializeWidget(InitializeWidgetRequest) returns (InitializeWidgetResponse) {option deprecated = true;}

  // Exchange the session key for a UUEK (deprecated)
  rpc ExchangeSessionKey(ExchangeSessionKeyRequest) returns (ExchangeSessionKeyResponse) {option deprecated = true;}
}


message RecurringPayment {
  string recurring_payment_key = 1;

  string nickname = 2;

  micashared.common.enums.currency.v1.Currency currency = 3;

  google.protobuf.Timestamp created = 4;
}

message RecurringPaymentTerms {
  // The total amount allowed to be obtained against this recurring payment during its lifetime.
  string total_spend_limit = 1;
}

// the recurring payment must have an associated link object which refers to a
// service provider link, which in turn refers to an instrument and user
message CreateRecurringPaymentRequest {

  oneof organization_identifier {
    string organization_key = 1 [(validate.rules).string = {max_len: 50}];

    // The primary key for this organization at the Partner.
    string organization_ref = 2 [(validate.rules).string = {max_len: 100}];
  }

  string uuek = 4;

  string nickname = 3;

  micashared.common.enums.currency.v1.Currency currency = 5;

  RecurringPaymentTerms terms = 6 [(validate.rules).message.required = true];
}

message CreateRecurringPaymentResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  string recurring_payment_key = 3;
}

message GetRecurringPaymentRequest {

  string recurring_payment_key = 1;

}

message GetRecurringPaymentResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_NOT_FOUND = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  RecurringPayment recurring_payment = 3;
}

message ProvisionRecurringPaymentUUEKRequest {
  string recurring_payment_key = 1;
}

message ProvisionRecurringPaymentUUEKResponse {

  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_NOT_FOUND = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  string uuek = 3;
}

message InitializeWidgetRequest {
  // Details of the user.
  micashared.common.v1.UserDemographic user_demographic = 3;
}

message InitializeWidgetResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;

    STATUS_SUCCESS = 1;
    // generic error that's not one of the following
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  string session_key = 3 [(validate.rules).string = {
    min_len: 27,
    max_len: 50
  }];
}

message ExchangeSessionKeyRequest {
  reserved 2, 3, 4;
  // The session key that was established when the Widget was initialized
  string session_key = 1 [(validate.rules).string = {
    min_len: 27,
    max_len: 50
  }];

  // The organization this operation is being processed for.
  oneof organization_identifier {
    string organization_key = 5 [(validate.rules).string = {max_len: 50}];

    // The primary key for this organization at the Partner.
    string organization_ref = 6 [(validate.rules).string = {max_len: 100}];
  }
}

message ExchangeSessionKeyResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_MATCHING_CODE_MISMATCH = 3;
    STATUS_NOT_FOUND = 4;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // The UUEK that the Partner can use to obtain or return value for this user.
  string partner_uuek = 3 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];
}
