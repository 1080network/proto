// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package mica.partner.organization.v1;

import "micashared/common/enums/barcodelocation/v1/barcode_location.proto";
import "micashared/common/enums/barcodetype/v1/barcode_type.proto";
import "micashared/common/enums/organizationcategory/v1/organization_category.proto";
import "micashared/common/v1/address.proto";
import "micashared/common/v1/error.proto";
import "micashared/common/v1/organization.proto";
import "validate/validate.proto";

option go_package = "mica/partner/organizationv1";
option java_outer_classname = "OrganizationProto";
option java_package = "io.mica.partner.organization.v1";
option objc_class_prefix = "MICA";

message CreateOrganizationRequest {
  // The primary key for this organization at the Partner.
  string organization_ref = 2 [(validate.rules).string = {
    min_len: 1,
    max_len: 100
  }];

  string name = 1 [(validate.rules).string = {
    min_len: 1,
    max_len: 100,
  }];

  micashared.common.v1.Address address = 3 [(validate.rules).message.required = true];

  repeated micashared.common.enums.organizationcategory.v1.OrganizationCategory categories = 4;

  micashared.common.enums.barcodetype.v1.BarcodeType barcode_type = 7 [(validate.rules).enum = {
    not_in: [0]
  }];

  micashared.common.enums.barcodelocation.v1.BarcodeLocation barcode_location = 8 [(validate.rules).enum = {
    not_in: [0]
  }];
}

message CreateOrganizationResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_DUPLICATE = 3;
    STATUS_NOT_FOUND = 4;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // The primary key of this organization within Mica.
  string organization_key = 3;

  int64 version = 4;
}

message GetOrganizationRequest {
  string obsolete_organization_key = 1 [
    deprecated = true,
    (validate.rules).string = {max_len: 50}
  ];
  oneof organization_identifier {
    string organization_key = 2 [(validate.rules).string = {max_len: 50}];

    // The primary key for this organization at the Partner.
    string organization_ref = 3 [(validate.rules).string = {max_len: 100}];
  }
}

message GetOrganizationResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_INVALID_PARTNER_ID = 3;
    STATUS_NOT_FOUND = 4;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  micashared.common.v1.Organization organization = 3;
}

message UpdateOrganizationRequest {
  string obsolete_organization_key = 1 [
    deprecated = true,
    (validate.rules).string = {max_len: 50}
  ];
  oneof organization_identifier {
    string organization_key = 6 [(validate.rules).string = {max_len: 50}];

    // The primary key for this organization at the Partner.
    string organization_ref = 7 [(validate.rules).string.max_len = 100];
  }

  int64 version = 2;

  string name = 3;

  micashared.common.v1.Address address = 4;

  repeated micashared.common.enums.organizationcategory.v1.OrganizationCategory categories = 5; // [(validate.rules) .repeated.min_items = 1];

  micashared.common.enums.barcodetype.v1.BarcodeType barcode_type = 16;

  micashared.common.enums.barcodelocation.v1.BarcodeLocation barcode_location = 17;
}

message UpdateOrganizationResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
    STATUS_VERSION_MISMATCH = 4;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  int64 version = 3;
}

message ActivateOrganizationRequest {
  oneof organization_identifier {
    option (validate.required) = true;

    string organization_key = 1 [(validate.rules).string = {max_len: 50}];

    // The primary key for this organization at the Partner.
    string organization_ref = 2 [(validate.rules).string.max_len = 100];
  }

  int64 version = 3;
}

message ActivateOrganizationResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
    STATUS_VERSION_MISMATCH = 4;
    STATUS_INVALID_STATE_TRANSITION = 5;
    STATUS_MISSING_ACCOUNT_DETAILS = 6;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  int64 version = 3;
}

message DeactivateOrganizationRequest {
  oneof organization_identifier {
    option (validate.required) = true;

    string organization_key = 1 [(validate.rules).string = {max_len: 50}];

    // The primary key for this organization at the Partner.
    string organization_ref = 2 [(validate.rules).string.max_len = 100];
  }

  int64 version = 3;
}

message DeactivateOrganizationResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
    STATUS_VERSION_MISMATCH = 4;
    STATUS_INVALID_STATE_TRANSITION = 5;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  int64 version = 3;
}

message SearchOrganizationRequest {
  // The name of this organization.
  string name = 1;

  // The category of this organization (used by Service Provider's to as part of their processing rules).
  micashared.common.enums.organizationcategory.v1.OrganizationCategory category = 2;
}

message SearchOrganizationResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_INVALID_PARTNER_ID = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  repeated micashared.common.v1.Organization organizations = 3;
}
