// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package mica.partner.value.v1;

import "google/protobuf/timestamp.proto";
import "micashared/common/enums/approvaltype/v1/approval_type.proto";
import "micashared/common/enums/currency/v1/currency.proto";
import "micashared/common/enums/organizationcategory/v1/organization_category.proto";
import "micashared/common/enums/valueoperationtype/v1/value_operation_type.proto";
import "micashared/common/v1/discount.proto";
import "micashared/common/v1/error.proto";
import "micashared/common/v1/line_item.proto";
import "micashared/common/v1/receipt.proto";
import "micashared/common/v1/risk_signals.proto";
import "micashared/common/v1/transaction.proto";
import "micashared/common/v1/uuek.proto";
import "validate/validate.proto";

option go_package = "mica/partner/valuev1";
option java_outer_classname = "ValueProto";
option java_package = "io.mica.partner.value.v1";
option objc_class_prefix = "MICA";

message Value {
  // Mica's transaction record primary key.
  string transaction_key = 1 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  // version of the user record, used for optimistic locking
  int64 version = 2;

  // Date that the Store was created at Mica.
  google.protobuf.Timestamp created = 3;

  // Date that the Store was last updated at Mica.
  google.protobuf.Timestamp updated = 4;

  micashared.common.enums.valueoperationtype.v1.ValueOperationType operation_type = 5;

  // The UUEK of the instrument either one specific to the partner or one provisioned by an Service Provider.
  string uuek = 6;

  // A unique identifier at the Partner for this transaction.
  string transaction_ref = 7 [(validate.rules).string.max_len = 100];

  // The 3-letter currency code defined in ISO 4217. Note all amounts are in this currency.
  micashared.common.enums.currency.v1.Currency currency = 9;

  string obsolete_organization_key = 10 [
    deprecated = true,
    (validate.rules).string = {max_len: 50}
  ];
  // The organization this operation is being processed for.
  oneof organization_identifier {
    string organization_key = 19 [(validate.rules).string = {max_len: 50}];

    // The primary key for this organization at the Partner.
    string organization_ref = 8 [(validate.rules).string = {max_len: 100}];
  }

  // Organization category
  micashared.common.enums.organizationcategory.v1.OrganizationCategory category = 11;

  string obsolete_store_key = 12 [
    deprecated = true,
    (validate.rules).string = {max_len: 50}
  ];
  // The store where this operation occurred.
  oneof store_identifier {
    string store_key = 20 [(validate.rules).string = {max_len: 50}];

    // The primary key for this store at the Partner.
    string store_ref = 21 [(validate.rules).string = {max_len: 100}];
  }

  // The clerk that processed this operation.
  string clerk_identifier = 13;

  // Total amount for this transaction.
  //
  // When Items are present then: `total_amount` = sum(`items.amount + items.tax_amount`)
  // Amount expressed as: ([0-9]*[.])?[0-9]+
  string total_amount = 14;

  // Amount expressed as: ([0-9]*[.])?[0-9]+
  string requested_amount = 15;

  // Amount expressed as: ([0-9]*[.])?[0-9]+
  string approved_amount = 16;

  string order_number = 17;

  // List of items bought or returned.
  repeated micashared.common.v1.LineItemAndStatus line_item_and_statuses = 18;

  google.protobuf.Timestamp expiration = 22;

  // A unique identifier at the Partner that represents the initial transaction in the set of transactions. This
  // would typically refer to the first Obtain transaction and passed in for Return transactions. The
  // Service Provider can then use this field to match up Returns with the original Obtain.
  string initial_transaction_ref = 23 [(validate.rules).string.max_len = 100];
}

// Type that represents the details of the value request (either to obtain or return).
message ValueRequest {
  reserved 3, 13;
  // The UUEK of the instrument is either one specific to the partner or one provisioned by a Service Provider.
  string uuek = 1;

  // A unique identifier at the Partner for this transaction.
  string transaction_ref = 2 [(validate.rules).string = {
    min_len: 1,
    max_len: 100
  }];

  // The 3-letter currency code defined in ISO 4217. Note all amounts are in this currency.
  micashared.common.enums.currency.v1.Currency currency = 4;

  string obsolete_organization_key = 5 [
    deprecated = true,
    (validate.rules).string = {max_len: 50}
  ];
  // The organization this operation is being processed for.
  oneof organization_identifier {
    string organization_key = 16 [(validate.rules).string = {max_len: 50}];

    // The primary key for this organization at the Partner.
    string organization_ref = 15 [(validate.rules).string = {max_len: 100}];
  }

  // Organization category
  micashared.common.enums.organizationcategory.v1.OrganizationCategory category = 6;

  string obsolete_store_key = 7 [
    deprecated = true,
    (validate.rules).string = {max_len: 50}
  ];
  // The store where this operation occurred.
  oneof store_identifier {
    string store_key = 17 [(validate.rules).string = {max_len: 50}];

    // The primary key for this store at the Partner.
    string store_ref = 18 [(validate.rules).string = {max_len: 100}];
  }

  // The clerk that processed this operation.
  string clerk_identifier = 8;

  // Total amount for this transaction.
  //
  // When Items are present then: `total_amount` = sum(`items.amount + items.tax_amount`) + surcharges
  // Amount expressed as: ([0-9]*[.])?[0-9]+
  string total_amount = 9 [(validate.rules).string = {
    min_len: 1,
    max_len: 50,
    pattern: "^([0-9]*[.])?[0-9]+$"
  }];

  // deprecated use surcharges instead
  string obsolete_surcharge_amount = 19;

  PartnerFee partner_fee = 21;

  // Surcharges can hold zero or more items of fees like ATM fees or the tip at a restaurant.
  repeated micashared.common.v1.Surcharge surcharges = 20;

  string order_number = 10;

  // List of items bought or returned.
  repeated micashared.common.v1.LineItem line_items = 11;

  repeated micashared.common.v1.Adjustment adjustments = 12;

  micashared.common.v1.ReceiptTransactionData receipt_data = 14;
}

message PartnerFee {
  // Amount expressed as: ([0-9]*[.])?[0-9]+
  string amount = 1;
}

// Type that represents the details of the value request (either to obtain or return).
message ObtainValueRequest {
  micashared.common.enums.approvaltype.v1.ApprovalType approval_type = 1;

  ValueRequest value = 2;

  // use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
  micashared.common.v1.RiskSignal risk_signal = 3;
}

message ObtainValueResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    // An approval for the full amount
    STATUS_FULL_APPROVAL = 1;
    // An error occurred when processing the request
    STATUS_ERROR = 2;
    // An approval was given for a partial amount
    STATUS_PARTIAL_APPROVAL = 3;
    // User instrument doesn't have sufficient value to cover the transaction
    STATUS_INSUFFICIENT_VALUE = 4;
    // When all products are either ineligible or age restricted
    STATUS_INELIGIBLE_PRODUCTS = 5;
    // Instrument/account not found
    STATUS_NOT_FOUND = 6;
    // User instrument is closed
    STATUS_INSTRUMENT_CLOSED = 7;
    // Request triggered a transactional risk or fraud check resulting in a decline
    STATUS_TRANSACTION_RISK_FRAUD = 8;
    // Request triggered a bad actor risk or fraud check resulting in a decline
    STATUS_BAD_ACTOR_RISK_FRAUD = 16;
    // Request triggered a user-based risk or fraud check resulting in a decline
    STATUS_USER_RISK_FRAUD = 17;
    // Request triggered a instrument-based risk or fraud check resulting in a decline
    STATUS_INSTRUMENT_RISK_FRAUD = 18;
    // The user needs to call the Service Provider to resolve an issue
    STATUS_USER_CALL_SERVICE_PROVIDER = 9;
    // The operation isn't supported by the Service Provider
    STATUS_UNSUPPORTED = 10;
    // The Fi is unavailable at this time
    STATUS_SERVICE_PROVIDER_UNAVAILABLE = 11;
    // The UUEK sent is invalid or not found
    STATUS_INVALID_UUEK = 12;
    // A valid PIN is required for this transaction
    STATUS_PIN_REQUIRED = 13;
    // returned when processing an EBT transaction but no line items have been given
    STATUS_MISSING_LINE_ITEMS = 14;
    // when partial approval is requested but not supported
    STATUS_PARTIAL_APPROVAL_INVALID = 15;
    // Request resulted in one or more limits being exceeded at the Service Provider
    STATUS_LIMIT_EXCEEDED = 19;
    // The referenced Organization of this request isn't fully configured to process transactions
    STATUS_ORGANIZATION_NOT_CONFIGURED = 21;
    // The total amount of the line items does not match the total amount of the transaction
    STATUS_LINE_ITEM_TOTAL_MISMATCH = 22;
    // The call to the Service Provider (a.k.a. the issuer) timed out
    STATUS_SERVICE_PROVIDER_TIMEOUT = 23;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // Primary key of created transaction assigned by Mica.
  string transaction_key = 3 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  // Correlation ID of the request assigned by Mica.
  string cid = 4;

  // Amount expressed as: ([0-9]*[.])?[0-9]+
  string approved_amount = 5;

  // summary of discounts that were applied
  micashared.common.v1.DiscountSummary discount_summary = 7;

  // status of each line item based on processing by Mica. The list will be in the same order as the request and will
  // will typically have a status of LINE_ITEM_STATUS_ELIGIBLE.
  repeated micashared.common.v1.LineItemSequenceAndStatus line_item_sequence_and_statuses = 6;

  // This message holds immutable details about the instruments that back UUEKs. These attributes can be used to have
  // stable references or knowledge of the underlying instrument that was used to transact.
  micashared.common.v1.ImmutableInstrumentDetails immutable_instrument_details = 8;

  micashared.common.v1.TransactionIdentifier transaction_identifier = 9;
}

message ReturnValueRequest {
  ValueRequest value = 1;

  // If set the return value must match the immutable identifier that the UUEK abstracts. This value is returned in
  // the value requests as part of ImmutableInstrumentDetails.
  string immutable_identifier_must_match = 2;

  // A unique identifier at the Partner that represents the initial transaction in the set of transactions. This
  // would typically refer to the first Obtain transaction and passed in for Return transactions. The
  // Service Provider can then use this field to match up Returns with the original Obtain.
  string initial_partner_transaction_ref = 3 [(validate.rules).string.max_len = 100];

  // use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
  micashared.common.v1.RiskSignal risk_signal = 4;
}

message ReturnValueResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    // An approval for the full amount
    STATUS_FULL_APPROVAL = 1;
    // An error occurred when processing the request
    STATUS_ERROR = 2;
    // User instrument is closed
    STATUS_INSTRUMENT_CLOSED = 3;
    // Instrument/account not found
    STATUS_NOT_FOUND = 4;
    // Request triggered a transactional risk or fraud check resulting in a decline
    STATUS_TRANSACTION_RISK_FRAUD = 5;
    // Request triggered a bad actor risk or fraud check resulting in a decline
    STATUS_BAD_ACTOR_RISK_FRAUD = 16;
    // Request triggered a user-based risk or fraud check resulting in a decline
    STATUS_USER_RISK_FRAUD = 17;
    // Request triggered a instrument-based risk or fraud check resulting in a decline
    STATUS_INSTRUMENT_RISK_FRAUD = 18;
    // The user needs to call the Service Provider to resolve an issue
    STATUS_USER_CALL_SERVICE_PROVIDER = 6;
    // The operation isn't supported by the Service Provider
    STATUS_UNSUPPORTED = 7;
    // The Fi is unavailable at this time
    STATUS_SERVICE_PROVIDER_UNAVAILABLE = 8;
    // The UUEK sent is invalid or not found
    STATUS_INVALID_UUEK = 9;
    // Request resulted in one or more limits being exceeded at the Service Provider
    STATUS_LIMIT_EXCEEDED = 19;
    // The referenced Organization of this request isn't fully configured to process transactions
    STATUS_ORGANIZATION_NOT_CONFIGURED = 20;
    // The total amount of the line items does not match the total amount of the transaction
    STATUS_LINE_ITEM_TOTAL_MISMATCH = 21;
    // The call to the Service Provider (a.k.a. the issuer) timed out
    STATUS_SERVICE_PROVIDER_TIMEOUT = 22;
    // The provided instrument is not the same one used for the original obtain and is required
    STATUS_INSTRUMENT_MISMATCH = 23;
    // The source network group is incompatible with the destination network group
    STATUS_INCOMPATIBLE_NETWORK_GROUP = 24;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // Primary key of created transaction assigned by Mica.
  string transaction_key = 3 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  // Correlation ID of the request assigned by Mica.
  string cid = 4;

  // Amount expressed as: ([0-9]*[.])?[0-9]+
  string approved_amount = 5;

  // This message holds immutable details about the instruments that back UUEKs. These attributes can be used to have
  // stable references or knowledge of the underlying instrument that was used to transact.
  micashared.common.v1.ImmutableInstrumentDetails immutable_instrument_details = 6;

  micashared.common.v1.TransactionIdentifier transaction_identifier = 7;
}

message GetValueRequest {
  oneof transaction_identifier {
    option (validate.required) = true;

    string transaction_key = 1;

    // the Partner's reference for this transaction
    string transaction_ref = 2 [(validate.rules).string.max_len = 100];
  }
}

message GetValueResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  Value value = 3;

  // The oldest transaction available
  google.protobuf.Timestamp oldest_transaction_time = 4;

  micashared.common.v1.TransactionIdentifier transaction_identifier = 5;
}

message ReverseReturnValueRequest {
  oneof transaction_identifier {
    option (validate.required) = true;

    // Mica primary key, returned when the original transaction was processed by Mica
    string original_transaction_key = 1 [(validate.rules).string = {
      min_len: 27,
      max_len: 50
    }];

    // A unique identifier at the Partner for the transaction being reversed.
    string original_transaction_ref = 2 [(validate.rules).string.min_len = 1];
  }

  // A unique identifier at the Partner for this reversal transaction
  string transaction_ref = 3 [(validate.rules).string.max_len = 100];

  // use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
  micashared.common.v1.RiskSignal risk_signal = 4;
}

message ReverseObtainValueRequest {
  oneof transaction_identifier {
    option (validate.required) = true;

    // Mica primary key, returned when the original transaction was processed by Mica
    string original_transaction_key = 1 [(validate.rules).string = {
      min_len: 27,
      max_len: 50
    }];

    // A unique identifier at the Partner for the transaction being reversed.
    string original_transaction_ref = 2 [(validate.rules).string.min_len = 1];
  }

  // A unique identifier at the Partner for this reversal transaction
  string transaction_ref = 3 [(validate.rules).string.max_len = 100];

  // use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
  micashared.common.v1.RiskSignal risk_signal = 4;
}

message ReverseObtainValueResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    // Reversal approved and successful
    STATUS_SUCCESS = 1;
    // An error occurred when processing the request
    STATUS_ERROR = 2;
    // The original transaction is not found
    STATUS_NOT_FOUND = 3;
    // The user needs to call the Service Provider to resolve an issue
    STATUS_USER_CALL_SERVICE_PROVIDER = 4;
    // The original transaction falls outside the allowable time window for reversal
    STATUS_CUTOFF_EXCEEDED = 10;
    // The original transaction has already been reversed
    STATUS_ALREADY_REVERSED = 11;
    // The original transaction is not one that can be reversed
    STATUS_INVALID_TRANSACTION_TYPE = 12;
    // User instrument is closed
    STATUS_INSTRUMENT_CLOSED = 13;
    // Request triggered a transactional risk or fraud check resulting in a decline
    STATUS_TRANSACTION_RISK_FRAUD = 14;
    // Request triggered a bad actor risk or fraud check resulting in a decline
    STATUS_BAD_ACTOR_RISK_FRAUD = 15;
    // Request triggered a user-based risk or fraud check resulting in a decline
    STATUS_USER_RISK_FRAUD = 16;
    // Request triggered a instrument-based risk or fraud check resulting in a decline
    STATUS_INSTRUMENT_RISK_FRAUD = 17;
    // The operation isn't supported by the Service Provider
    STATUS_UNSUPPORTED = 5;
    // The Service Provider is temporarily unavailable
    STATUS_SERVICE_PROVIDER_UNAVAILABLE = 6;
    // The source network group is incompatible with the destination network group
    STATUS_INCOMPATIBLE_NETWORK_GROUP = 8;
    // Request resulted in one or more limits being exceeded at the Service Provider
    STATUS_LIMIT_EXCEEDED = 9;
    // The call to the Service Provider (a.k.a. the issuer) timed out
    STATUS_SERVICE_PROVIDER_TIMEOUT = 18;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // Primary key of created transaction assigned by Mica.
  string transaction_key = 3 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  // TODO list of discounts that were reversed

  micashared.common.v1.TransactionIdentifier transaction_identifier = 4;
}

message ReverseReturnValueResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    // Reversal approved and successful
    STATUS_SUCCESS = 1;
    // An error occurred when processing the request
    STATUS_ERROR = 2;
    // The original transaction is not found
    STATUS_NOT_FOUND = 3;
    // The user needs to call the Service Provider to resolve an issue
    STATUS_USER_CALL_SERVICE_PROVIDER = 4;
    // The original transaction falls outside the allowable time window for reversal
    STATUS_CUTOFF_EXCEEDED = 9;
    // The original transaction has already been reversed
    STATUS_ALREADY_REVERSED = 10;
    // The original transaction is not one that can be reversed
    STATUS_INVALID_TRANSACTION_TYPE = 11;
    // User instrument is closed
    STATUS_INSTRUMENT_CLOSED = 12;
    // Request triggered a transactional risk or fraud check resulting in a decline
    STATUS_TRANSACTION_RISK_FRAUD = 13;
    // Request triggered a bad actor risk or fraud check resulting in a decline
    STATUS_BAD_ACTOR_RISK_FRAUD = 14;
    // Request triggered a user-based risk or fraud check resulting in a decline
    STATUS_USER_RISK_FRAUD = 15;
    // Request triggered a instrument-based risk or fraud check resulting in a decline
    STATUS_INSTRUMENT_RISK_FRAUD = 16;
    // The operation isn't supported by the Service Provider
    STATUS_UNSUPPORTED = 5;
    // The Service Provider is temporarily unavailable
    STATUS_SERVICE_PROVIDER_UNAVAILABLE = 6;
    // The source network group is incompatible with the destination network group
    STATUS_INCOMPATIBLE_NETWORK_GROUP = 8;
    // Request resulted in one or more limits being exceeded at the Service Provider
    STATUS_LIMIT_EXCEEDED = 17;
    // The call to the Service Provider (a.k.a. the issuer) timed out
    STATUS_SERVICE_PROVIDER_TIMEOUT = 18;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // Primary key of created transaction assigned by Mica.
  string transaction_key = 3 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  micashared.common.v1.TransactionIdentifier transaction_identifier = 4;
}

message HoldValueRequest {
  reserved 7;

  google.protobuf.Timestamp expiration = 1 [(validate.rules).timestamp = {required: true}];

  string uuek = 2;

  // A unique identifier at the Partner for this transaction.
  string transaction_ref = 3 [(validate.rules).string.max_len = 100];

  // The 3-letter currency code defined in ISO 4217. Note all amounts are in this currency.
  micashared.common.enums.currency.v1.Currency currency = 4;

  LocationDetails location_details = 5 [(validate.rules).message = {required: true}];

  PartnerFee partner_fee = 10;

  // Total amount for this transaction.
  // Amount expressed as: ([0-9]*[.])?[0-9]+
  string total_amount = 6 [(validate.rules).string = {
    min_len: 1,
    max_len: 50,
    pattern: "^([0-9]*[.])?[0-9]+$"
  }];

  // Surcharges can hold zero or more items like ATM fees or the tip at a restaurant.
  repeated micashared.common.v1.Surcharge surcharges = 9;

  // use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
  micashared.common.v1.RiskSignal risk_signal = 8;
}

message HoldValueResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    // An approval for the full amount
    STATUS_FULL_APPROVAL = 1;
    // An error occurred when processing the request
    STATUS_ERROR = 2;
    // User instrument doesn't have sufficient value to cover the transaction
    STATUS_INSUFFICIENT_VALUE = 4;
    // Instrument/account not found
    STATUS_NOT_FOUND = 6;
    // User instrument is closed
    STATUS_INSTRUMENT_CLOSED = 7;
    // Request triggered a transactional risk or fraud check resulting in a decline
    STATUS_TRANSACTION_RISK_FRAUD = 8;
    // Request triggered a bad actor risk or fraud check resulting in a decline
    STATUS_BAD_ACTOR_RISK_FRAUD = 16;
    // Request triggered a user-based risk or fraud check resulting in a decline
    STATUS_USER_RISK_FRAUD = 17;
    // Request triggered a instrument-based risk or fraud check resulting in a decline
    STATUS_INSTRUMENT_RISK_FRAUD = 18;
    // The user needs to call the Service Provider to resolve an issue
    STATUS_USER_CALL_SERVICE_PROVIDER = 9;
    // The operation isn't supported by the Service Provider
    STATUS_UNSUPPORTED = 10;
    // The Fi is unavailable at this time
    STATUS_SERVICE_PROVIDER_UNAVAILABLE = 11;
    // The UUEK sent is invalid or not found
    STATUS_INVALID_UUEK = 12;
    // A valid PIN is required for this transaction
    STATUS_PIN_REQUIRED = 13;
    // returned when processing an EBT transaction but no line items have been given
    STATUS_MISSING_LINE_ITEMS = 14;
    // Request resulted in one or more limits being exceeded at the Service Provider
    STATUS_LIMIT_EXCEEDED = 19;
    // A request for a hold on an instrument that can't support holds
    STATUS_INSTRUMENT_TYPE_NOT_SUPPORTED = 21;
    // The referenced Organization of this request isn't fully configured to process transactions
    STATUS_ORGANIZATION_NOT_CONFIGURED = 22;
    // The call to the Service Provider (a.k.a. the issuer) timed out
    STATUS_SERVICE_PROVIDER_TIMEOUT = 23;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // Primary key of created transaction assigned by Mica.
  string transaction_key = 3 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  // Correlation ID of the request assigned by Mica.
  string cid = 4;

  // Amount expressed as: ([0-9]*[.])?[0-9]+
  string approved_amount = 5;

  // This message holds immutable details about the instruments that back UUEKs. These attributes can be used to have
  // stable references or knowledge of the underlying instrument that was used to transact.
  micashared.common.v1.ImmutableInstrumentDetails immutable_instrument_details = 6;

  micashared.common.v1.TransactionIdentifier transaction_identifier = 7;
}

message AmendHoldValueRequest {
  oneof transaction_identifier {
    option (validate.required) = true;

    string hold_transaction_key = 1;

    // the Partner's reference for the hold transaction
    string hold_transaction_ref = 2 [(validate.rules).string.max_len = 100];
  }

  // the Partner's reference for the amended hold transaction
  string transaction_ref = 4 [(validate.rules).string.max_len = 100];

  // the new expiration time for the hold
  google.protobuf.Timestamp expiration = 3 [(validate.rules).timestamp = {required: true}];

  PartnerFee partner_fee = 5;

  // Total amount for this transaction.
  // Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
  string total_amount = 6;

  //use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
  micashared.common.v1.RiskSignal risk_signal = 8;
}

message AmendHoldValueResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    // An approval for the full amount
    STATUS_FULL_APPROVAL = 1;
    // An error occurred when processing the request
    STATUS_ERROR = 2;
    // User instrument doesn't have sufficient value to cover the transaction
    STATUS_INSUFFICIENT_VALUE = 3;
    // Instrument/account not found
    STATUS_NOT_FOUND = 4;
    // User instrument is closed
    STATUS_INSTRUMENT_CLOSED = 5;
    // Request triggered a transactional risk or fraud check resulting in a decline
    STATUS_TRANSACTION_RISK_FRAUD = 6;
    // Request triggered a bad actor risk or fraud check resulting in a decline
    STATUS_BAD_ACTOR_RISK_FRAUD = 7;
    // Request triggered a user-based risk or fraud check resulting in a decline
    STATUS_USER_RISK_FRAUD = 8;
    // Request triggered a instrument-based risk or fraud check resulting in a decline
    STATUS_INSTRUMENT_RISK_FRAUD = 9;
    // The user needs to call the Service Provider to resolve an issue
    STATUS_USER_CALL_SERVICE_PROVIDER = 10;
    // The operation isn't supported by the Service Provider
    STATUS_UNSUPPORTED = 11;
    // The Fi is unavailable at this time
    STATUS_SERVICE_PROVIDER_UNAVAILABLE = 12;
    // Request resulted in one or more limits being exceeded at the Service Provider
    STATUS_LIMIT_EXCEEDED = 14;
    // A request for a hold on an instrument that can't support holds
    STATUS_INSTRUMENT_TYPE_NOT_SUPPORTED = 15;
    // The referenced Organization of this request isn't fully configured to process transactions
    STATUS_ORGANIZATION_NOT_CONFIGURED = 16;
    // The source network group is incompatible with the destination network group
    STATUS_INCOMPATIBLE_NETWORK_GROUP = 17;
    // The hold transaction has already expired
    STATUS_ALREADY_EXPIRED = 18;
    // The hold transaction has already been released
    STATUS_ALREADY_RELEASED = 19;
    // The hold transaction has already been obtained
    STATUS_ALREADY_OBTAINED = 20;
    // The call to the Service Provider (a.k.a. the issuer) timed out
    STATUS_SERVICE_PROVIDER_TIMEOUT = 21;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // Primary key of created transaction assigned by Mica.
  string transaction_key = 3 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  // Correlation ID of the request assigned by Mica.
  string cid = 4;

  // Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
  string approved_amount = 5;

  micashared.common.v1.TransactionIdentifier transaction_identifier = 6;
}

message ReleaseHoldValueRequest {
  oneof transaction_identifier {
    option (validate.required) = true;

    string hold_transaction_key = 1;

    // the Partner's reference for the hold transaction
    string hold_transaction_ref = 2 [(validate.rules).string.max_len = 100];
  }

  // the Partner's reference for the release transaction
  string transaction_ref = 3 [(validate.rules).string.max_len = 100];

  // use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
  micashared.common.v1.RiskSignal risk_signal = 4;

  PartnerFee partner_fee = 5;
}

message ReleaseHoldValueResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
    STATUS_ALREADY_EXPIRED = 4;
    STATUS_ALREADY_RELEASED = 5;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // Primary key of created transaction assigned by Mica.
  string transaction_key = 3 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  // Correlation ID of the request assigned by Mica.
  string cid = 4;

  micashared.common.v1.TransactionIdentifier transaction_identifier = 5;
}

message LocationDetails {
  // The organization this operation is being processed for.
  oneof organization_identifier {
    string organization_key = 16 [(validate.rules).string = {max_len: 50}];

    // The primary key for this organization at the Partner.
    string organization_ref = 15 [(validate.rules).string = {max_len: 100}];
  }

  // Organization category
  micashared.common.enums.organizationcategory.v1.OrganizationCategory category = 6;

  // The store where this operation occurred.
  oneof store_identifier {
    string store_key = 17 [(validate.rules).string = {max_len: 50}];

    // The primary key for this store at the Partner.
    string store_ref = 18 [(validate.rules).string = {max_len: 100}];
  }
}

message ObtainHoldValueRequest {
  reserved 9;
  // If a previous hold has been placed on the instrument, the hold transaction key or ref must be provided
  oneof transaction_identifier {
    option (validate.required) = true;

    string hold_transaction_key = 1;

    // the Partner's reference for the hold transaction
    string hold_transaction_ref = 2 [(validate.rules).string.max_len = 100];
  }

  // A unique identifier at the Partner for this transaction.
  string transaction_ref = 4 [(validate.rules).string.max_len = 100];

  // The 3-letter currency code defined in ISO 4217. Note all amounts are in this currency.
  micashared.common.enums.currency.v1.Currency currency = 5;

  LocationDetails location_details = 6 [(validate.rules).message = {required: true}];

  // The clerk that processed this operation.
  string clerk_identifier = 7;

  PartnerFee partner_fee = 16;

  // Total amount for this transaction.
  //
  // When Items are present then: `total_amount` = sum(`items.amount + items.tax_amount`) + surcharges
  // Amount expressed as: ([0-9]*[.])?[0-9]+
  string total_amount = 8 [(validate.rules).string = {
    min_len: 1,
    max_len: 50,
    pattern: "^([0-9]*[.])?[0-9]+$"
  }];

  // Surcharges can hold zero or more items like ATM fees or the tip at a restaurant.
  repeated micashared.common.v1.Surcharge surcharges = 15;

  string order_number = 10;

  // List of items bought or returned.
  repeated micashared.common.v1.LineItem line_items = 11;

  repeated micashared.common.v1.Adjustment adjustments = 12;

  micashared.common.v1.ReceiptTransactionData receipt_data = 13;

  // use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
  micashared.common.v1.RiskSignal risk_signal = 14;
}

message ObtainHoldValueResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    // An approval for the full amount
    STATUS_FULL_APPROVAL = 1;
    // An error occurred when processing the request
    STATUS_ERROR = 2;
    // Instrument/account not found
    STATUS_NOT_FOUND = 6;
    // Request triggered a transactional risk or fraud check resulting in a decline
    STATUS_TRANSACTION_RISK_FRAUD = 8;
    // Request triggered a bad actor risk or fraud check resulting in a decline
    STATUS_BAD_ACTOR_RISK_FRAUD = 16;
    // Request triggered a user-based risk or fraud check resulting in a decline
    STATUS_USER_RISK_FRAUD = 17;
    // Request triggered a instrument-based risk or fraud check resulting in a decline
    STATUS_INSTRUMENT_RISK_FRAUD = 18;
    // The operation isn't supported by the Service Provider
    STATUS_UNSUPPORTED = 10;
    // The Fi is unavailable at this time
    STATUS_SERVICE_PROVIDER_UNAVAILABLE = 11;
    // The hold was already expired or released or not found (as it's already been released or expired and purged)
    STATUS_INVALID_HOLD = 21;
    // A request for a hold on an instrument that can't support holds
    STATUS_INSTRUMENT_TYPE_NOT_SUPPORTED = 22;
    // The referenced Organization of this request isn't fully configured to process transactions
    STATUS_ORGANIZATION_NOT_CONFIGURED = 23;
    // The total amount of the line items does not match the total amount of the transaction
    STATUS_LINE_ITEM_TOTAL_MISMATCH = 24;
    // The call to the Service Provider (a.k.a. the issuer) timed out
    STATUS_SERVICE_PROVIDER_TIMEOUT = 25;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // Primary key of created transaction assigned by Mica.
  string transaction_key = 3 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  // Correlation ID of the request assigned by Mica.
  string cid = 4;

  // Amount expressed as: ([0-9]*[.])?[0-9]+
  string approved_amount = 5;

  // summary of discounts that were applied
  micashared.common.v1.DiscountSummary discount_summary = 7;

  // status of each line item based on processing by Mica. The list will be in the same order as the request and will
  // will typically have a status of LINE_ITEM_STATUS_ELIGIBLE.
  repeated micashared.common.v1.LineItemSequenceAndStatus line_item_sequence_and_statuses = 6;

  // This message holds immutable details about the instruments that back UUEKs. These attributes can be used to have
  // stable references or knowledge of the underlying instrument that was used to transact.
  micashared.common.v1.ImmutableInstrumentDetails immutable_instrument_details = 8;

  micashared.common.v1.TransactionIdentifier transaction_identifier = 9;
}