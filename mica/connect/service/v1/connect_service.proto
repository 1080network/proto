// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package mica.connect.service.v1;

import "mica/connect/instrument/v1/instrument.proto";
import "mica/connect/serviceprovider/v1/service_provider.proto";
import "micashared/common/ping/v1/ping.proto";
import "micashared/common/v1/error.proto";
import "micashared/common/v1/user.proto";
import "validate/validate.proto";

option go_package = "mica/connect/servicev1";
option java_outer_classname = "ConnectServiceProto";
option java_package = "io.mica.connect.service.v1";
option objc_class_prefix = "MICA";

// The Connect Service implements both Legacy Connect and Connect. It is used to enroll user's financial accounts on the
// Mica network.
service ConnectService {
  //<editor-fold desc="Service Provider Operations">

  // Find Service Providers that match a given name. This includes pagination. Called by the mica Widget to populate
  // the list of Service Providers the user can choose from. Called from Widget.
  rpc SearchServiceProvider(serviceprovider.v1.SearchServiceProviderRequest) returns (serviceprovider.v1.SearchServiceProviderResponse) {}
  //</editor-fold>

  //<editor-fold desc="Instrument Operations">

  // Initiate an enrollment where the user has already obtained a verification code
  rpc WidgetRegisterInstrumentWithVerificationCode(WidgetRegisterInstrumentWithVerificationCodeRequest) returns (WidgetRegisterInstrumentWithVerificationCodeResponse) {}

  // Following the call from Partner to InitializeWidget, this call is the first one that the Widget makes after the
  // user has provided the necessary details to determine their identity. It returns a list of instruments that the
  // user has. Called from Widget.
  rpc WidgetRegisterInstrumentInitiate(instrument.v1.WidgetRegisterInstrumentInitiateRequest) returns (instrument.v1.WidgetRegisterInstrumentInitiateResponse) {}

  // In cases where the user has more than on instrument with a given Service Provider this call is needed to identify
  // which one the user wants to enroll. Called from Widget. Optional call required when user uses username/password
  // and they have more than one account at the service provider
  rpc WidgetRegisterInstrumentWithAccount(instrument.v1.WidgetRegisterInstrumentWithAccountRequest) returns (instrument.v1.WidgetRegisterInstrumentWithAccountResponse) {}

  // The final call the Widget makes for either the mica Matching Code. Called from Widget.
  rpc WidgetRegisterInstrumentComplete(instrument.v1.WidgetRegisterInstrumentCompleteRequest) returns (instrument.v1.WidgetRegisterInstrumentCompleteResponse) {}
  //</editor-fold>

  //<editor-fold desc="Admin Operations">

  // An operation to ping the server to ensure it's up and running and that the connection is good.
  rpc Ping(micashared.common.ping.v1.PingRequest) returns (micashared.common.ping.v1.PingResponse) {}
  //</editor-fold>
}

message WidgetRegisterInstrumentWithVerificationCodeRequest {
  string session_key = 1 [(validate.rules).string = {
    min_len: 27,
    max_len: 50
  }];

  string verification_code = 2 [(validate.rules).string = {
    min_len: 1,
    max_len: 50
  }];
}

message WidgetRegisterInstrumentWithVerificationCodeResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;

    STATUS_SUCCESS = 1;

    // generic error that's not one of the following
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  micashared.common.v1.UserDemographic shared_user_information = 3;
}
