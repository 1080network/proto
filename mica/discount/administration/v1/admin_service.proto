// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package mica.discount.administration.v1;

import "google/protobuf/timestamp.proto";
import "micashared/common/v1/authentication_token.proto";
import "micashared/common/v1/error.proto";
import "micashared/common/v1/external_client.proto";
import "micashared/common/v1/mtls_certificate.proto";
import "validate/validate.proto";

option go_package = "mica/discount/administrationv1";
option java_outer_classname = "AdministrationServiceProto";
option java_package = "io.mica.discount.administration.v1";
option objc_class_prefix = "MICA";

service DiscountAdministrationService {

  rpc GenerateToMicaCertificate(GenerateToMicaCertificateRequest) returns (GenerateToMicaCertificateResponse) {}

  // Client certificates are used when mica needs to call out to a customers environment.
  rpc GenerateFromMicaClientCertificate(GenerateFromMicaClientCertificateRequest) returns (GenerateFromMicaClientCertificateResponse) {}
  // After signing the CSR the member will upload the signed cert
  rpc UpdateFromMicaClientCertificate(UpdateFromMicaClientCertificateRequest) returns (UpdateFromMicaClientCertificateResponse) {}
  // there can only be one enable cert for each endpoint
  rpc EnableFromMicaClientCertificate(EnableFromMicaClientCertificateRequest) returns (EnableFromMicaClientCertificateResponse) {}
  // return all from mica certs for now
  rpc SearchFromMicaClientCertificate(SearchFromMicaClientCertificateRequest) returns (SearchFromMicaClientCertificateResponse) {}
  // External authentication mechanisms for Mica to call provider endpoints
  rpc GetFromMicaClientSettings(GetFromMicaClientSettingsRequest) returns (GetFromMicaClientSettingsResponse) {}

  rpc UpdateFromMicaClientCallbackAddress(UpdateFromMicaClientCallbackAddressRequest) returns (UpdateFromMicaClientCallbackAddressResponse) {}

  // creates the token configuration
  rpc CreateApiTokenConfiguration(CreateApiTokenConfigurationRequest) returns (CreateApiTokenConfigurationResponse) {}

  // if the authentication type is api token use these methods to properly setup the api token
  //retrieves the api token configuration including the token itself
  rpc GetApiTokenConfiguration(GetApiTokenConfigurationRequest) returns (GetApiTokenConfigurationResponse) {}

  // Update the configuration of the token, the set fields will be modified
  rpc UpdateAPITokenAuthenticationConfiguration(UpdateAPITokenAuthenticationConfigurationRequest) returns (UpdateAPITokenAuthenticationConfigurationResponse) {}

  // tests the external call to verify proper configuration and connectivity
  rpc PingExternal(PingExternalRequest) returns (PingExternalResponse) {}
}

message PingExternalRequest {
  string tenant = 1 [(validate.rules).string.min_len = 1];
}

message PingExternalResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
  }
  Status status = 1;

  google.protobuf.Timestamp server_time = 2;

  google.protobuf.Timestamp server_start_time = 7;

  string build_version = 3;

  string build_sha = 4;

  string build_time = 5;

  string service_type = 6;
}

// We generate the db entry and return the csr to the user so they can sign it.
message GenerateFromMicaClientCertificateRequest {
  string display_name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
}

message GenerateFromMicaClientCertificateResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  micashared.common.v1.FromMicaClientCertificate certificate_to_sign = 3;
}

message UpdateFromMicaClientCertificateRequest {
  string certificate_id = 1;
  string display_name = 2;
  //Base64 standard encoded PEM string
  string base64_signed_cert_pem_from_csr = 3;
  //Base64 standard encoded PEM string
  string base64_rootca_pem = 4;

  string tenant = 5 [(validate.rules).string.min_len = 1];
}

message UpdateFromMicaClientCertificateResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
  micashared.common.v1.FromMicaClientCertificate certificate = 3;
}

message EnableFromMicaClientCertificateRequest {
  string certificate_id = 1 ;
  string tenant = 2 [(validate.rules).string.min_len = 1];
}

message EnableFromMicaClientCertificateResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
  micashared.common.v1.FromMicaClientCertificate certificate = 3;
}


message SearchFromMicaClientCertificateRequest {
  // Optional filter to search by tenant
  string tenant = 1 [(validate.rules).string.min_len = 1];
}

message SearchFromMicaClientCertificateResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
  repeated micashared.common.v1.FromMicaClientCertificate certificates = 3;
}

message GetFromMicaClientSettingsRequest {
  string tenant = 1 [(validate.rules).string.min_len = 1];
}

message GetFromMicaClientSettingsResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  micashared.common.v1.ExternalClientSettings settings = 3;
}

message UpdateFromMicaClientCallbackAddressRequest {
  int64 version = 1 [(validate.rules).int64.gte = 0];
  // the callback address must folow a <hostname>:<port> pattern for example
  // mycallbackservicie.somecompany.io:443
  string callback_address = 2 [(validate.rules).string.pattern = "^[^/]+:\\d{3,6}$"];

  string tenant = 3 [(validate.rules).string.min_len = 1];
}

message UpdateFromMicaClientCallbackAddressResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  int64 version = 3 [(validate.rules).int64.gte = 0];
}

message CreateApiTokenConfigurationRequest {
  micashared.common.v1.AuthenticationHeaderConfiguration header_configuration = 1 [(validate.rules).message.required = true];
  string api_token_value = 2 [(validate.rules).string.min_len = 1];
  //The pem encoded certificate chain
  repeated string pem_ca_chain = 3 [(validate.rules).repeated.min_items = 1];

  string tenant = 4 [(validate.rules).string.min_len = 1];
}

message CreateApiTokenConfigurationResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
  int64 version = 3 [(validate.rules).int64.gte = 0];
}

message GetApiTokenConfigurationRequest {
  // The tenant for which the api token configuration is requested
  string tenant = 1 [(validate.rules).string.min_len = 1];
}

message GetApiTokenConfigurationResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  micashared.common.v1.ApiTokenConfiguration api_token_configuration = 3;
}

message UpdateAPITokenAuthenticationConfigurationRequest {
  micashared.common.v1.AuthenticationHeaderConfiguration header_configuration = 2;
  string api_token_value = 3;
  //The pem encoded certificate chain
  repeated string pem_ca_chain = 4;

  string tenant = 5 [(validate.rules).string.min_len = 1];
}

message UpdateAPITokenAuthenticationConfigurationResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
}

message MTLSCertificateSignatureRequest {
  //Base64 standard encoded PEM string
  string base64_pem_csr = 1 [(validate.rules).string.min_len = 1];
}

message GenerateToMicaCertificateRequest {
  MTLSCertificateSignatureRequest csr = 1 [(validate.rules).message.required = true];
  string expire_in_duration = 2;
  string display_name = 3;
  string tenant = 4 [(validate.rules).string.min_len = 1];
}

message GenerateToMicaCertificateResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  ToMicaCertificate certificate = 3;
}

message ToMicaCertificate {
  //Serial number of the generated certificate
  string serial_number = 1 [(validate.rules).string.min_len = 1];

  google.protobuf.Timestamp issued = 2;

  google.protobuf.Timestamp expiry = 3 [(validate.rules).timestamp.required = true];

  //whether this certificate can be used or has been disallowed for access regardless of expiration
  bool enabled = 4;

  //Base64 standard encoded PEM string
  string base64_certificate_pem = 12;

  //Base64 standard encoded PEM string
  string base64_rootca_pem = 13;

  //The friendly name of the certificate
  string display_name = 10;
}
