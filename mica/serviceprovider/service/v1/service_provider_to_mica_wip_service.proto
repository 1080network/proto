// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package mica.serviceprovider.service.v1;

import "micashared/common/enums/currency/v1/currency.proto";
import "micashared/common/enums/instrumenttype/v1/instrument_type.proto";
import "micashared/common/v1/error.proto";
import "micashared/common/v1/pagination.proto";
import "micashared/common/v1/user.proto";
import "validate/validate.proto";

option go_package = "mica/serviceprovider/servicev1";
option java_outer_classname = "ServiceProviderToMicaWIPServiceProto";
option java_package = "io.mica.serviceprovider.service.v1";
option objc_class_prefix = "MICA";

// Service for Work In Progress or experimental operations that may become a standard product feature in the future
service ServiceProviderToMicaWIPService {
  //<editor-fold desc="Directory Proxy Operations">

  rpc SetVisibilityStatus(SetVisibilityStatusRequest) returns (SetVisibilityStatusResponse) {
    // set visibility_status
  }

  rpc DiscoverUser(DiscoverUserRequest) returns (DiscoverUserResponse) {}

  rpc GetServiceProviderUUEK(GetServiceProviderUUEKRequest) returns (GetServiceProviderUUEKResponse) {}
  //</editor-fold>

  //<editor-fold desc="PIN Operations">

  rpc SetPIN(SetPINRequest) returns (SetPINResponse) {}

  rpc ValidatePIN(ValidatePINRequest) returns (ValidatePINResponse) {}

  rpc ResetPIN(ResetPINRequest) returns (ResetPINResponse) {}

  rpc RemovePIN(RemovePINRequest) returns (RemovePINResponse) {}
  //</editor-fold>

  rpc GetLinkedAccountBalance(GetLinkedAccountBalanceRequest) returns (GetLinkedAccountBalanceResponse) {}

  rpc UpdateAccountEnableForPurchase(UpdateAccountEnableForPurchaseRequest) returns (UpdateAccountEnableForPurchaseResponse) {}
}

enum VisibilityStatus {
  VISIBILITY_STATUS_UNSPECIFIED = 0;
  VISIBILITY_STATUS_DISCOVERABLE = 1;
  VISIBILITY_STATUS_HIDDEN = 2;
}

message SetVisibilityStatusRequest {
  string service_provider_user_key = 1 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  string service_provider_instrument_key = 3 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  VisibilityStatus visibility_status = 7;
}

message SetVisibilityStatusResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
}

message DiscoverUserRequest {
  micashared.common.v1.UserDemographic user_demographic = 2;

  micashared.common.v1.Pagination pagination = 4;
}

message DiscoverUserResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  repeated User users = 3;

  micashared.common.v1.Pagination pagination = 5;
}

message GetServiceProviderUUEKRequest {
  string uuek = 4;
}

message GetServiceProviderUUEKResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_INSTRUMENT_NOT_FOUND = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  micashared.common.v1.UserDemographic user_demographic = 3;
}

message SetPINRequest {
  oneof user_identifier {
    option (validate.required) = true;

    // The key representing this user in Mica.
    string service_provider_user_key = 1 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];

    // Primary key on the external system.
    string service_provider_user_ref = 2 [(validate.rules).string.max_len = 100];
  }

  string pin = 3; // @gotags: mask:"security"
}

message SetPINResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
    STATUS_PIN_ALREADY_SET = 4;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
}

message ValidatePINRequest {
  oneof user_identifier {
    option (validate.required) = true;

    // The key representing this user in Mica.
    string service_provider_user_key = 1 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];

    // Primary key on the external system.
    string service_provider_user_ref = 2 [(validate.rules).string.max_len = 100];
  }

  string pin = 3; // @gotags: mask:"security"
}

message ValidatePINResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
    STATUS_PIN_MISMATCH = 4;
    STATUS_PIN_LOCKED = 5;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
}

message ResetPINRequest {
  oneof user_identifier {
    option (validate.required) = true;

    // The key representing this user in Mica.
    string service_provider_user_key = 1 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];

    // Primary key on the external system.
    string service_provider_user_ref = 2 [(validate.rules).string.max_len = 100];
  }

  string old_pin = 3; // @gotags: mask:"security"

  string new_pin = 4; // @gotags: mask:"security"
}

message ResetPINResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
    STATUS_PIN_MISMATCH = 4;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
}

message RemovePINRequest {
  oneof user_identifier {
    option (validate.required) = true;

    // The key representing this user in Mica.
    string service_provider_user_key = 1 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];

    // Primary key on the external system.
    string service_provider_user_ref = 2 [(validate.rules).string.max_len = 100];
  }
}

message RemovePINResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
}

message User {
  string service_provider_user_key = 1 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  micashared.common.v1.UserDemographic user_demographic = 2;

  string service_provider_name = 3;

  micashared.common.enums.instrumenttype.v1.InstrumentType instrument_type = 4;

  // The 3-letter currency code defined in ISO 4217.
  micashared.common.enums.currency.v1.Currency currency = 5;

  // Last 4 digits of this instrument.
  string nickname = 6;

  string uuek = 7;
}

message GetLinkedAccountBalanceRequest {
  string link_key = 1;
}

message GetLinkedAccountBalanceResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_NOT_FOUND = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // URN that represents the FIAT urn:value:fiat:usd
  string currency = 3;

  // the amount of money available in a given currency for purchases
  string available_balance = 4;

  // The unit of the value_provider_balance. Provided for reference only.
  string value_provider_balance_unit = 5;

  // the amount of value, in given unit, held for this account by the provider. Provided for reference only.
  string value_provider_balance = 6;

  bool enable_for_purchase_flag = 7;
}

message UpdateAccountEnableForPurchaseRequest {
  string link_key = 1;

  bool enable_for_purchase_flag = 2;
}

message UpdateAccountEnableForPurchaseResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_NOT_FOUND = 2;
    STATUS_ERROR = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
}
