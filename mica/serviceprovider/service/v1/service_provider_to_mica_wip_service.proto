// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package mica.serviceprovider.service.v1;

import "google/protobuf/timestamp.proto";
import "mica/discount/discount/v1/discount.proto";
import "mica/serviceprovider/instrument/v1/instrument.proto";
import "micashared/common/enums/currency/v1/currency.proto";
import "micashared/common/enums/discounttype/v1/discount_type.proto";
import "micashared/common/enums/instrumenttype/v1/instrument_type.proto";
import "micashared/common/v1/error.proto";
import "micashared/common/v1/pagination.proto";
import "micashared/common/v1/risk_signals.proto";
import "micashared/common/v1/user.proto";
import "validate/validate.proto";

option go_package = "mica/serviceprovider/servicev1";
option java_outer_classname = "ServiceProviderToMicaWIPServiceProto";
option java_package = "io.mica.serviceprovider.service.v1";
option objc_class_prefix = "MICA";

// Service for Work In Progress or experimental operations that may become a standard product feature in the future
service ServiceProviderToMicaWIPService {
  // Set the network PIN for a user.
  rpc SetPIN(SetPINRequest) returns (SetPINResponse) {}

  // Validate the network PIN for a user.
  rpc ValidatePIN(ValidatePINRequest) returns (ValidatePINResponse) {}

  // Reset the network PIN for a user.
  rpc ResetPIN(ResetPINRequest) returns (ResetPINResponse) {}

  // Remove the network PIN for a user.
  rpc RemovePIN(RemovePINRequest) returns (RemovePINResponse) {}

  // Retrieve the balance of a linked account (if available).
  rpc GetLinkedAccountBalance(GetLinkedAccountBalanceRequest) returns (GetLinkedAccountBalanceResponse) {}

  // Update the enable for purchase flag for a linked account so that it will be used in a multi-tender transaction.
  rpc UpdateAccountEnableForPurchase(UpdateAccountEnableForPurchaseRequest) returns (UpdateAccountEnableForPurchaseResponse) {}

  // Search for recurring payments of a given user.
  rpc SearchRecurringPayments(SearchRecurringPaymentsRequest) returns (SearchRecurringPaymentsResponse) {}

  // Send value from one user to another (P2P).
  rpc SendValue(SendValueRequest) returns (SendValueResponse) {option deprecated = true;}

  // Search for discounts available to a user.
  rpc SearchUserDiscount(SearchUserDiscountRequest) returns (SearchUserDiscountResponse) {}
}

message DiscoverUserRequest {
  micashared.common.v1.UserDemographic user_demographic = 2;

  micashared.common.v1.Pagination pagination = 4;
}

message DiscoverUserResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  repeated User users = 3;

  micashared.common.v1.Pagination pagination = 5;
}

message SetPINRequest {
  oneof user_identifier {
    option (validate.required) = true;

    // The key representing this user in Mica.
    string service_provider_user_key = 1 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];

    // Primary key on the external system.
    string service_provider_user_ref = 2 [(validate.rules).string.max_len = 100];
  }

  string pin = 3; // @gotags: mask:"security"
}

message SetPINResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
    STATUS_PIN_ALREADY_SET = 4;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
}

message ValidatePINRequest {
  oneof user_identifier {
    option (validate.required) = true;

    // The key representing this user in Mica.
    string service_provider_user_key = 1 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];

    // Primary key on the external system.
    string service_provider_user_ref = 2 [(validate.rules).string.max_len = 100];
  }

  string pin = 3; // @gotags: mask:"security"
}

message ValidatePINResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
    STATUS_PIN_MISMATCH = 4;
    STATUS_PIN_LOCKED = 5;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
}

message ResetPINRequest {
  oneof user_identifier {
    option (validate.required) = true;

    // The key representing this user in Mica.
    string service_provider_user_key = 1 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];

    // Primary key on the external system.
    string service_provider_user_ref = 2 [(validate.rules).string.max_len = 100];
  }

  string old_pin = 3; // @gotags: mask:"security"

  string new_pin = 4; // @gotags: mask:"security"
}

message ResetPINResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
    STATUS_PIN_MISMATCH = 4;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
}

message RemovePINRequest {
  oneof user_identifier {
    option (validate.required) = true;

    // The key representing this user in Mica.
    string service_provider_user_key = 1 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];

    // Primary key on the external system.
    string service_provider_user_ref = 2 [(validate.rules).string.max_len = 100];
  }
}

message RemovePINResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
}

message User {
  string service_provider_user_key = 1 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  micashared.common.v1.UserDemographic user_demographic = 2;

  string service_provider_name = 3;

  micashared.common.enums.instrumenttype.v1.InstrumentType instrument_type = 4;

  // The 3-letter currency code defined in ISO 4217.
  micashared.common.enums.currency.v1.Currency currency = 5;

  // Last 4 digits of this instrument.
  string nickname = 6;

  string uuek = 7;
}

message GetLinkedAccountBalanceRequest {
  string link_key = 1;
}

message GetLinkedAccountBalanceResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_NOT_FOUND = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // URN that represents the FIAT urn:value:fiat:usd
  string currency = 3;

  // the amount of money available in a given currency for purchases
  string available_balance = 4;

  // The unit of the value_provider_balance. Provided for reference only.
  string value_provider_balance_unit = 5;

  // the amount of value, in given unit, held for this account by the provider. Provided for reference only.
  string value_provider_balance = 6;

  bool enable_for_purchase_flag = 7;
}

message UpdateAccountEnableForPurchaseRequest {
  string link_key = 1;

  bool enable_for_purchase_flag = 2;
}

message UpdateAccountEnableForPurchaseResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_NOT_FOUND = 2;
    STATUS_ERROR = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
}

message RecurringPayment {
  string recurring_payment_key = 1;

  string nickname = 2;

  string instrument_key = 3;

  mica.serviceprovider.instrument.v1.InstrumentExternalReference instrument_external_ref = 4;

  micashared.common.enums.currency.v1.Currency currency = 5;

  google.protobuf.Timestamp created_at = 6;

  RecurringPaymentUsage usage = 7;

  RecurringPaymentTerms terms = 8;
}

message RecurringPaymentUsage {
  google.protobuf.Timestamp last_payment = 1;

  string last_payment_amount = 2;

  uint32 number_of_payments_made = 3;

  string total_payment_amount = 4;
}

message RecurringPaymentTerms {
  string total_spend_limit = 1;
}

message SearchRecurringPaymentsRequest {
  oneof by {
    ByUser user = 1;
  }

  message ByUser {
    oneof id {
      //this is the id in the service provider for the user that is requesting an enrollment
      string user_ref = 1 [(validate.rules).string.max_len = 100];
      string user_key = 2 [(validate.rules).string = {
        min_len: 30,
        max_len: 50
      }];
    }
  }
}

message SearchRecurringPaymentsResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_NOT_FOUND = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  repeated RecurringPayment recurring_payments = 4;
}

message SendValueRequest {
  string from_service_provider_user_key = 1 [(validate.rules).string = {max_len: 50}];
  oneof user_identifier {
    // The key representing this user in Mica.
    string service_provider_user_key = 6 [(validate.rules).string = {max_len: 50}];

    string service_provider_user_ref = 7 [(validate.rules).string = {max_len: 100}];
  }

  string from_service_provider_instrument_key = 2 [(validate.rules).string = {max_len: 50}];
  oneof instrument_identifier {
    // The key representing this instrument in Mica.
    string service_provider_instrument_key = 8 [(validate.rules).string = {max_len: 50}];

    string service_provider_instrument_ref = 9 [(validate.rules).string = {max_len: 100}];
  }

  // @gotags: mask:"security"
  string to_uuek = 3;

  micashared.common.enums.currency.v1.Currency currency = 4;

  // Amount expressed as: ([0-9]*[.])?[0-9]+
  string amount = 5;

  // use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
  micashared.common.v1.RiskSignal risk_signal = 10;
}

message SendValueResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  string transaction_key = 3;
}

message ServiceProviderUserDiscount {
  string discount_key = 1 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  // human readable description for a given discount that can be shown to the end user
  string headline = 11 [(validate.rules).string.max_len = 100];

  // human readable description for a given discount that can be shown to the end user
  string summary = 12 [(validate.rules).string.max_len = 300];

  // human readable description for a given discount that can be shown to the end user
  string receipt_description = 2 [(validate.rules).string.max_len = 200];

  mica.discount.discount.v1.DiscountStatus status = 3;

  micashared.common.enums.discounttype.v1.DiscountType type = 4;

  google.protobuf.Timestamp valid_from = 5 [(validate.rules).timestamp.required = false];

  google.protobuf.Timestamp valid_to = 6 [(validate.rules).timestamp = {
    required: false,
    gt_now: true
  }];

  micashared.common.enums.currency.v1.Currency currency = 7;

  oneof discount_amount {
    option (validate.required) = true;

    mica.discount.discount.v1.MonetaryAmount monetary_amount = 8;
    mica.discount.discount.v1.PercentageAmount percentage_amount = 9;
  }

  // address to the image for this discount definition (note that this image is expected to be square)
  string thumbnail_url = 10;
}

// This operation will only filter discounts that are valid and ignores any that aren't
message SearchUserDiscountRequest {
  oneof criteria {
    // The key representing this user in Mica.
    string service_provider_user_key = 1 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];

    // Primary key on the external system.
    string service_provider_user_ref = 2 [(validate.rules).string.max_len = 100];
  }

  micashared.common.enums.discounttype.v1.DiscountType type = 3;

  micashared.common.v1.Pagination pagination = 5;
}

message SearchUserDiscountResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  repeated ServiceProviderUserDiscount user_discounts = 3;

  micashared.common.v1.Pagination pagination = 5;
}
