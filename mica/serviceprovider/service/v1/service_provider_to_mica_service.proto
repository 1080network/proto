// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package mica.serviceprovider.service.v1;

import "google/protobuf/timestamp.proto";
import "mica/serviceprovider/instrument/v1/instrument.proto";
import "mica/serviceprovider/serviceprovider/v1/service_provider.proto";
import "mica/serviceprovider/user/v1/user.proto";
import "mica/serviceprovider/uuek/v1/uuek.proto";
import "mica/serviceprovider/value/v1/value.proto";
import "micashared/common/v1/receipt.proto";

option go_package = "mica/serviceprovider/servicev1";
option java_outer_classname = "ServiceProviderToMicaServiceProto";
option java_package = "io.mica.serviceprovider.service.v1";
option objc_class_prefix = "MICA";

// The operations in this service allow the Service Provider to register their users and
// the user's instruments (accounts).  In addition there are operations to update, retrieve, search
// and delete those users and instruments. The SP can retrieve/search Organizations to retrieve
// information about them that is not passed via ValueObtain or ValueReturn. Finally the SP can
// provision it's own UUEKs which it can distribute to it's own users.
// The SP starts by authenticating themselves after which they can call the other operations in
// this service. At a minimum, the SP will need to call RegisterUser and RegisterInstrument for
// each user and instrument they want to make available for their users at mica. For both Users and
// Instruments the SP can retrieve, update and remove them.
// When mica calls the SP with either ValueObtain or ValueReturn mica will include the
// organizationKey and the specific category being used for this request. If the SP wants to get
// more information about the organization (e.g. name, all categories, and it's address) they can
// use the GetOrganization and SearchOrganization calls.
service ServiceProviderToMicaService {
  // Retrieves the details of the service provider record at Mica.
  rpc GetServiceProvider(serviceprovider.v1.GetServiceProviderRequest) returns (serviceprovider.v1.GetServiceProviderResponse) {}

  // Called when the Service Provider wants to register one of their users for Mica. Note that this does only the user and not the instrument (account).
  rpc RegisterUser(user.v1.RegisterUserRequest) returns (user.v1.RegisterUserResponse) {}

  // Retrieve a user based on it's identifier.
  rpc GetUser(user.v1.GetUserRequest) returns (user.v1.GetUserResponse) {}

  // Update a user's demographic data held at Mica.
  rpc UpdateUser(user.v1.UpdateUserRequest) returns (user.v1.UpdateUserResponse) {}

  // Remove a User from Mica. Typically called when a User ends their relationship with the issuer (e.g. closes their account).
  rpc RemoveUser(user.v1.RemoveUserRequest) returns (user.v1.RemoveUserResponse) {}

  // Searches for Users held at Mica.
  rpc SearchUser(user.v1.SearchUserRequest) returns (user.v1.SearchUserResponse) {}

  // Called to register a Users instrument (account) for use at Mica. This requires a user to already have been registered.
  rpc RegisterInstrument(instrument.v1.RegisterInstrumentRequest) returns (instrument.v1.RegisterInstrumentResponse) {}

  // Retrieve an instrument based on it's key.
  rpc GetInstrument(instrument.v1.GetInstrumentRequest) returns (instrument.v1.GetInstrumentResponse) {}

  // Remove an instrument from Mica.
  rpc RemoveInstrument(instrument.v1.RemoveInstrumentRequest) returns (instrument.v1.RemoveInstrumentResponse) {}

  // Like GetInstrument, can be used to retrieve Instruments based on the criteria in the request.
  rpc SearchInstrument(instrument.v1.SearchInstrumentRequest) returns (instrument.v1.SearchInstrumentResponse) {}

  // Used to create a UUEK that can be given to the Issuer's users in order to transact at Merchants (Partners) that support Mica.
  rpc ProvisionServiceProviderUUEK(uuek.v1.ProvisionServiceProviderUUEKRequest) returns (uuek.v1.ProvisionServiceProviderUUEKResponse) {}

  // Used to remove an existing UUEK from Mica rendering it inoperable.
  rpc RemoveServiceProviderUUEK(uuek.v1.RemoveServiceProviderUUEKRequest) returns (uuek.v1.RemoveServiceProviderUUEKResponse) {}

  // Searches for UUEKs by criteria. This would generally not be used assuming that UUEK's are created single use (i.e. number_of_uses is one when provisioning the UUEK).
  rpc SearchServiceProviderUUEK(uuek.v1.SearchServiceProviderUUEKRequest) returns (uuek.v1.SearchServiceProviderUUEKResponse) {}

  // Initiates a linking process by returning a code based on the account owned by this user which will be linked to
  // another member. This would typically be used by the user to establish a persistent payment method at a merchant.
  rpc ProvisionInstrumentLinkingCode(instrument.v1.ProvisionInstrumentLinkingCodeRequest) returns (instrument.v1.ProvisionInstrumentLinkingCodeResponse) {}

  // If another member of the network initiated a link then this allows the link to be completed.
  rpc CompleteLinkingWithCode(instrument.v1.CompleteLinkingWithCodeRequest) returns (instrument.v1.CompleteLinkingWithCodeResponse) {}

  // Retrieve a specific instrument link between two members.
  rpc GetInstrumentLink(instrument.v1.GetInstrumentLinkRequest) returns (instrument.v1.GetInstrumentLinkResponse) {}

  // Search for instrument links.
  rpc SearchInstrumentLinks(instrument.v1.SearchInstrumentLinksRequest) returns (instrument.v1.SearchInstrumentLinksResponse) {}

  // Remove a instrument link.
  rpc RemoveInstrumentLink(instrument.v1.RemoveInstrumentLinkRequest)returns (instrument.v1.RemoveInstrumentLinkResponse) {}

  // Retrieve a given transaction based on the transaction identifier. This is used to retrieve the details of a
  // transaction that has already occurred and is intended to be used in a pre-production environment. Mica aggressively
  // purges transaction data from the operational data store within a short period of time and this call retrieves
  // transactions from the operational data store.
  rpc GetValue(value.v1.GetValueRequest) returns (value.v1.GetValueResponse) {}

  // Retrieve a receipt based on the transaction key.
  rpc GetReceipt(micashared.common.v1.GetReceiptRequest) returns (micashared.common.v1.GetReceiptResponse) {}

  // An operation to ping the server to ensure it's up and running and that the connection is good.
  // DEPRECATED. Please switch use cases to dedicated mica.member.ping.v1.PingService
  rpc Ping(PingRequest) returns (PingResponse) {
    option deprecated = true;
  }
}

message PingRequest {}

message PingResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
  }
  Status status = 1;

  google.protobuf.Timestamp server_time = 2;

  google.protobuf.Timestamp server_start_time = 7;

  string build_version = 3;

  string build_sha = 4;

  string build_time = 5;

  string service_type = 6;
}

