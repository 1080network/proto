// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package mica.serviceprovider.instrument.v1;

import "google/protobuf/timestamp.proto";
import "micashared/common/enums/currency/v1/currency.proto";
import "micashared/common/enums/instrumenttype/v1/instrument_type.proto";
import "micashared/common/v1/instrument.proto";
import "micashared/common/v1/error.proto";
import "validate/validate.proto";

option go_package = "mica/serviceprovider/instrumentv1";
option java_outer_classname = "InstrumentProto";
option java_package = "io.mica.serviceprovider.instrument.v1";
option objc_class_prefix = "MICA";

message RegisterInstrumentRequest {
  string obsolete_service_provider_user_key = 1 [
    deprecated = true,
    (validate.rules).string = {max_len: 50}
  ];
  oneof user_identifier {
    // The key representing this user in Mica.
    string service_provider_user_key = 7 [(validate.rules).string = {max_len: 50}];

    string service_provider_user_ref = 6 [(validate.rules).string = {max_len: 100}];
  }

  // Primary key on the external system.
  string service_provider_instrument_ref = 2 [(validate.rules).string.max_len = 100];

  micashared.common.enums.instrumenttype.v1.InstrumentType instrument_type = 3;

  // The 3-letter currency code defined in ISO 4217.
  micashared.common.enums.currency.v1.Currency currency = 4;

  // Last 4 digits of this instrument.
  string nickname = 5;
}

message RegisterInstrumentResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_DUPLICATE = 3;
    STATUS_NOT_FOUND = 4;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // The key representing this instrument in Mica.
  string service_provider_instrument_key = 3 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  int64 version = 4;
}

message InstrumentExternalReference {
  string service_provider_user_ref = 1 [(validate.rules).string = {min_len: 1}];
  string service_provider_instrument_ref = 2 [(validate.rules).string = {min_len: 1}];
}

message GetInstrumentRequest {
  oneof instrument_identifier {
    option (validate.required) = true;

    // The key representing this instrument in Mica.
    string service_provider_instrument_key = 1 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];

    // Primary key on the external system.
    // DEPRECATED - Use external_reference instead
    string obsolete_service_provider_instrument_ref = 2 [
      (validate.rules).string.max_len = 100,
      deprecated = true
    ];

    // Primary key on the external system.
    InstrumentExternalReference external_reference = 3;
  }
}

message Instrument {
  // The primary key that represents this instrument at Mica.
  string service_provider_instrument_key = 1 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  // version of the user record, used for optimistic locking.
  int64 version = 2;

  // Date that the Store was created at Mica.
  google.protobuf.Timestamp created = 3;

  // Date that the Store was last updated at Mica.
  google.protobuf.Timestamp updated = 4;

  // Primary key on the external system.
  string service_provider_instrument_ref = 5 [(validate.rules).string.max_len = 100];

  // The key that represents this user.
  string service_provider_user_key = 6 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  // Primary key on the external system.
  string service_provider_user_ref = 7 [(validate.rules).string.max_len = 100];

  micashared.common.enums.instrumenttype.v1.InstrumentType instrument_type = 8;

  // The 3-letter currency code defined in ISO 4217.
  micashared.common.enums.currency.v1.Currency currency = 9;

  // Last for characters of this instrument.
  string nickname = 10;
}

message GetInstrumentResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  Instrument instrument = 3;
}

message RemoveInstrumentRequest {
  oneof instrument_identifier {
    option (validate.required) = true;

    // The key representing this instrument in Mica.
    string service_provider_instrument_key = 1 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];

    // Primary key on the external system.
    // DEPRECATED - Use external_reference instead
    string obsolete_service_provider_instrument_ref = 2 [(validate.rules).string.max_len = 100, deprecated = true];

    // Primary key on the external system.
    InstrumentExternalReference external_reference = 3;
  }
}

message RemoveInstrumentResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
}

message SearchInstrumentRequest {
  oneof criteria {
    // The key representing this user in Mica.
    string service_provider_user_key = 1 [(validate.rules).string = {max_len: 50}];

    string service_provider_user_ref = 2 [(validate.rules).string = {max_len: 100}];
  }
}

message SearchInstrumentResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // List of instruments that matched the search criteria.
  repeated Instrument instruments = 3;
}

message ProvisionInstrumentLinkingCodeRequest {
  oneof user_identifier {
    option (validate.required) = true;

    //this is the id in the service provider for the user that is requesting an enrollment
    string service_provider_user_ref = 1 [(validate.rules).string.max_len = 100];
    string service_provider_user_key = 2 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];
  }

  oneof instrument_identifier {
    option (validate.required) = true;

    //this is the id in the service provider for the instrument (account, etc) that will be used to transact.
    string service_provider_instrument_ref = 3 [(validate.rules).string.max_len = 100];
    string service_provider_instrument_key = 4 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];
  }

  // if there is any information to exchange at linking time this is when it gets passed to the network which will forward
  // to the merchant/acquiring side when the linking has been created
  micashared.common.v1.InstrumentLinkClaims claims = 5;
  
  LinkUsageProfile usage_profile = 6;
}

message ProvisionInstrumentLinkingCodeResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_INSTRUMENT_NOT_FOUND = 3;
    STATUS_USER_NOT_FOUND = 4;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  //this is the code that the service provider can display or send to the user to enter on any prompt asking for it
  string linking_code = 3;
}

message CompleteLinkingWithCodeRequest{
  // String code supplied by the end user
  string linking_code = 1;
  oneof to_user{
    //this is the id in the service provider for the user that is requesting an enrollment
    string user_ref = 2 [(validate.rules).string.max_len = 100];
    string user_key = 3 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];
  }

  oneof to_instrument{
    //this is the id in the service provider for the user that is requesting an enrollment
    string instrument_ref = 4 [(validate.rules).string.max_len = 100];
    string instrument_key = 5 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];
  }
}

message CompleteLinkingWithCodeResponse{
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    //the link source is in a different network and therefore not compatible
    STATUS_INVALID_NETWORK = 2;
    //the source account or instrument for this link is not supported
    STATUS_UNSUPPORTED_LINK_SOURCE = 3;
    //the specified user does not exist
    STATUS_USER_NOT_FOUND = 4;
    // the specified instrument does not exist
    STATUS_INSTRUMENT_NOT_FOUND = 5;
    //the provided code is incorrect
    STATUS_INVALID_CODE = 6;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  InstrumentLink instrument_link = 3;
    
  // Any claims that are associated with the link as provided by the Service Provider
  micashared.common.v1.InstrumentLinkClaims claims = 4;
}

message GetInstrumentLinkRequest{
  string link_key = 1;
}

message GetInstrumentLinkResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_LINK_NOT_FOUND =2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  InstrumentLink instrument_link = 3; 
}

// This message allows to search links by user, by instrument, setting both operates as a "AND" operator
message SearchInstrumentLinksRequest {
  oneof by_user{
    //this is the id in the service provider for the user that is requesting an enrollment
    string user_ref = 1 [(validate.rules).string.max_len = 100];
    string user_key = 2 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];
  }

  oneof by_instrument{
    //this is the id in the service provider for the user that is requesting an enrollment
    string instrument_ref = 3 [(validate.rules).string.max_len = 100];
    string instrument_key = 4 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];
  }
}

message SearchInstrumentLinksResponse{
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_NOT_FOUND =2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  repeated InstrumentLink instrument_links = 3;
}

message RemoveInstrumentLinkRequest{
  string link_key = 1; 
}

message RemoveInstrumentLinkResponse{
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_NOT_FOUND =2;
    STATUS_LINK_IN_USE = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
}


message LinkUsageProfile {
  bool for_one_time_use = 1;
  //todo maybe have something that pre-defines the link type? for example
  // another account I own, an account owned by someone else? 
}


message InstrumentLink {
  // The primary key that represents this link at Mica.
  string link_key = 1;

  // version of the link record, used for optimistic locking.
  int64 version = 2;

  // Date that the Store was created at Mica.
  google.protobuf.Timestamp created = 3;

  // Date that the Store was last updated at Mica.
  google.protobuf.Timestamp updated = 4;

  string service_provider_user_key = 5;
  
  string service_provider_user_ref = 6;

  string service_provider_instrument_ref = 7;

  string service_provider_instrument_key = 8;

  string organization_name = 9;

  string organization_icon_url = 10;

  micashared.common.v1.LinkedInstrumentData linked_instrument_data = 11;
}

message GetRecurringPaymentRequest {

  string recurring_payment_key = 1[(validate.rules).string = {min_len: 30,max_len: 50}];

}

message GetRecurringPaymentResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_NOT_FOUND =2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  micashared.common.v1.RecurringPayment recurring_payment = 3;

}

message CancelRecurringPaymentRequest {

  string recurring_payment_key = 1[(validate.rules).string = {min_len: 30,max_len: 50}];

}

message CancelRecurringPaymentResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_NOT_FOUND =2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

}

message SearchRecurringPaymentsRequest {
  oneof by_user{
    //this is the id in the service provider for the user that is requesting an enrollment
    string user_ref = 1 [(validate.rules).string.max_len = 100];
    string user_key = 2 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];
  }

  oneof by_instrument{
    // this is the id in the service provider for the user that is requesting an enrollment
    string instrument_ref = 3 [(validate.rules).string.max_len = 100];

    string instrument_key = 4 [(validate.rules).string = {
      min_len: 30,
      max_len: 50
    }];
  }
}

message SearchRecurringPaymentsResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_NOT_FOUND =2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  repeated micashared.common.v1.RecurringPayment recurring_payments = 3;

}
