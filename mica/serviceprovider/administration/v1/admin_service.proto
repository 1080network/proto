// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package mica.serviceprovider.administration.v1;

import "micashared/common/ping/v1/ping.proto";
import "micashared/common/v1/data_extraction.proto";
import "micashared/common/v1/external_client.proto";
import "micashared/common/v1/mtls_certificate.proto";
import "validate/validate.proto";

option go_package = "mica/serviceprovider/administrationv1";
option java_outer_classname = "AdministrationServiceProto";
option java_package = "io.mica.serviceprovider.administration.v1";
option objc_class_prefix = "MICA";

// This is the administrative interface for a Service Provider member
service ServiceProviderAdministrationService {
  // Client certificates are used when mica needs to call out to a customers environment.
  rpc GenerateFromMicaClientCertificate(micashared.common.v1.GenerateFromMicaClientCertificateRequest) returns (micashared.common.v1.GenerateFromMicaClientCertificateResponse) {}
  // After signing the CSR the member will upload the signed cert
  rpc UpdateFromMicaClientCertificate(micashared.common.v1.UpdateFromMicaClientCertificateRequest) returns (micashared.common.v1.UpdateFromMicaClientCertificateResponse) {}
  // there can only be one enable cert for each endpoint
  rpc EnableFromMicaClientCertificate(micashared.common.v1.EnableFromMicaClientCertificateRequest) returns (micashared.common.v1.EnableFromMicaClientCertificateResponse) {}
  // return all from mica certs for now
  rpc SearchFromMicaClientCertificate(micashared.common.v1.SearchFromMicaClientCertificateRequest) returns (micashared.common.v1.SearchFromMicaClientCertificateResponse) {}
  // External authentication mechanisms for Mica to call provider endpoints
  rpc GetFromMicaClientSettings(micashared.common.v1.GetFromMicaClientSettingsRequest) returns (micashared.common.v1.GetFromMicaClientSettingsResponse) {}

  rpc UpdateFromMicaClientCallbackAddress(micashared.common.v1.UpdateFromMicaClientCallBackAddressRequest) returns (micashared.common.v1.UpdateFromMicaClientCallBackAddressResponse) {}

  rpc SearchDataExtractionStatistics(micashared.common.v1.SearchDataExtractionRequest) returns (micashared.common.v1.SearchDataExtractionResponse) {}

  rpc GetDataExtractionStatistics(micashared.common.v1.GetDataExtractionRequest) returns (micashared.common.v1.GetDataExtractionResponse) {}
  // tests the external call to verify proper configuration and connectivity using the currently enabled certificate
  rpc PingExternal(micashared.common.ping.v1.PingRequest) returns (micashared.common.ping.v1.PingResponse) {}
  // tests the call to the callback service using a specific certificate that may or may not be enabled
  rpc PingExternalWithCertificate(PingExternalWithCertificateRequest) returns (PingExternalWithCertificateResponse) {}
}

message PingExternalWithCertificateRequest {
  string certificate_id = 1 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];
}

message PingExternalWithCertificateResponse {
  string certificate_id = 1;
  micashared.common.ping.v1.PingResponse response = 2;
}
