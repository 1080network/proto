// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package mica.member.auth.v1;

import "google/protobuf/timestamp.proto";
import "micashared/common/v1/error.proto";
import "validate/validate.proto";

option go_package = "mica/member/authv1";
option java_outer_classname = "MTLSToMicaServiceProto";
option java_package = "io.mica.member.auth.v1";
option objc_class_prefix = "MICA";

// Service for managing mTLS certificates for members authenticating with Mica member APIs
service MTLSToMicaService {

  //  Generate a new mTLS certificate for authenticating calls to Mica member APIs
  rpc GenerateCertificate(GenerateCertificateRequest) returns (GenerateCertificateResponse) {}

  // Update the certificate with a given serial number, only supports enable/disable for now
  rpc EnableCertificate(EnableCertificateRequest) returns (EnableCertificateResponse) {}

  // do we need a separate Disable call?
  rpc DisableCertificate(DisableCertificateRequest) returns (DisableCertificateResponse) {}

  //Search for certificates and return the ones that match the criteria provided
  rpc SearchCertificate(SearchCertificateRequest) returns (SearchCertificateResponse) {}

  // return a single certificate
  rpc GetCertificate(GetCertificateRequest) returns (GetCertificateResponse) {}
}

message MTLSCertificateSignatureRequest {
  //Base64 standard encoded PEM string
  string base64_pem_csr = 1 [(validate.rules).string.min_len = 1];
}

message ToMicaCertificate {
  //Serial number of the generated certificate
  string serial_number = 1 [(validate.rules).string.min_len = 1];

  google.protobuf.Timestamp issued = 2;

  google.protobuf.Timestamp expiry = 3 [(validate.rules).timestamp.required = true];

  //whether this certificate can be used or has been disallowed for access regardless of expiration
  bool enabled = 4;

  //Base64 standard encoded PEM string
  string base64_certificate_pem = 12;

  //Base64 standard encoded PEM string
  string base64_rootca_pem = 13;

  //The roles the certificate has
  repeated string roles = 9;

  //The friendly name of the certificate
  string display_name = 10;

  //The last usage of the certificate
  google.protobuf.Timestamp last_used = 11;
}

message GenerateCertificateRequest {
  MTLSCertificateSignatureRequest csr = 1 [(validate.rules).message.required = true];
  repeated string roles = 3 [(validate.rules).repeated.min_items = 1];
  string expire_in_duration = 4;
  string display_name = 5;
}

message GenerateCertificateResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  ToMicaCertificate certificate = 3;
}

message EnableCertificateRequest {
  string serial_number = 1 [(validate.rules).string.min_len = 1];
}

message EnableCertificateResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
  string serial_number = 3;
}

message DisableCertificateRequest {
  string serial_number = 1 [(validate.rules).string.min_len = 1];
}

message DisableCertificateResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
  string serial_number = 3;
}

message GetCertificateRequest {
  string serial_number = 1 [(validate.rules).string.min_len = 1];
}

message GetCertificateResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_NOT_FOUND = 2;
    STATUS_ERROR = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  ToMicaCertificate certificate = 3;
}

message SearchCertificateRequest {}

message SearchCertificateResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
  repeated ToMicaCertificate certificates = 3;
}